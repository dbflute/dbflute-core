##
## Copyright 2014-2019 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCommon};

import scala.collection.immutable;

import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

import org.dbflute.cbean.ListResultBean;
import org.dbflute.cbean.PagingBean;
import org.dbflute.cbean.PagingResultBean;
import org.dbflute.immutable.DBableEntity;
import org.dbflute.immutable.outsidesql._;
import org.dbflute.outsidesql._;
import org.dbflute.outsidesql.executor._;
import org.dbflute.outsidesql.typed._;
import org.dbflute.jdbc.CursorHandler;
import org.dbflute.jdbc.StatementConfig;

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                  OutsideSql                                          _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                   Basic Executor                     _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/**
 * The executor of outside-SQL.
 * <pre>
 * {Basic}
 *   o selectList()
 *   o execute()
 *   o call()
 *
 * {Entity}
 *   o entityHandling().selectEntity()
 *   o entityHandling().selectEntityWithDeletedCheck()
 *
 * {Paging}
 *   o autoPaging().selectList()
 *   o autoPaging().selectPage()
 *   o manualPaging().selectList()
 *   o manualPaging().selectPage()
 *
 * {Cursor}
 *   o cursorHandling().selectCursor()
 *
 * {Option}
 *   o removeBlockComment().selectList()
 *   o removeLineComment().selectList()
 *   o formatSql().selectList()
 *   o configure(...).selectList()
 * </pre>
 * @param [BEHAVIOR] The type of behavior.
 * @author ${database.classAuthor}
 */
class ScrOutsideSqlTypedBasicExecutor[BEHAVIOR](executor: OutsideSqlBasicExecutor[BEHAVIOR]) {

    // ===================================================================================
    //                                                                       Entity Select
    //                                                                       =============
    /**
     * Select entity by the outside-SQL. <span style="color: #AD4747">{Typed Interface}</span><br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path and entity-type.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberId(3);
     * OptionalEntity&lt;SimpleMember&gt; member
     *     = memberBhv.outsideSql().<span style="color: #CC4747">selectEntity</span>(pmb);
     * if (member.isPresent()) {
     *     ... = member.get...();
     * } else {
     *     ...
     * }
     * </pre>
     * @param <ENTITY> The type of entity.
     * @param pmb The typed parameter-bean for entity handling. (NotNull)
     * @return The selected entity. (NullAllowed)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outside-SQL is not found.
     * @throws org.dbflute.exception.EntityDuplicatedException When the entity is duplicated.
     */
    def selectEntity[IMMU, DBLE <: DBableEntity[IMMU]](pmb: ImmutableEntityHandlingPmb[BEHAVIOR, IMMU, DBLE]): Option[IMMU] = {
        return Option(executor.entityHandling().selectEntity(pmb)).map(_.toImmutable());
    }

    // ===================================================================================
    //                                                                         List Select
    //                                                                         ===========
    /**
     * Select the list of the entity by the outsideSql. <span style="color: #AD4747">{Typed Interface}</span><br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path and entity-type.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberName_PrefixSearch("S");
     * ListResultBean&lt;SimpleMember&gt; memberList
     *     = memberBhv.outsideSql().<span style="color: #CC4747">selectList</span>(pmb);
     * for (SimpleMember member : memberList) {
     *     ... = member.get...();
     * }
     * </pre>
     * It needs to use customize-entity and parameter-bean.
     * The way to generate them is following:
     * <pre>
     * -- #df:entity#
     * -- !df:pmb!
     * -- !!Integer memberId!!
     * -- !!String memberName!!
     * -- !!...!!
     * </pre>
     * @param <ENTITY> The type of entity for element.
     * @param pmb The typed parameter-bean for list handling. (NotNull)
     * @return The result bean of selected list. (NotNull)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outsideSql is not found.
     * @throws org.dbflute.exception.DangerousResultSizeException When the result size is over the specified safety size.
     */
    def selectList[IMMU, DBLE <: DBableEntity[IMMU]](pmb: ImmutableListHandlingPmb[BEHAVIOR, IMMU, DBLE]): immutable.List[IMMU] = {
        return toScalaList(executor.selectList(pmb)).map(_.toImmutable);
    }

    /**
     * Select the list of the entity by the outsideSql. {Typed Interface}<br>
     * This method can accept each element: path, parameter-bean(Object type), entity-type.
     * <pre>
     * String path = MemberBhv.PATH_selectSimpleMember;
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberName_PrefixSearch("S");
     * Class&lt;SimpleMember&gt; entityType = SimpleMember.class;
     * ListResultBean&lt;SimpleMember&gt; memberList
     *     = memberBhv.outsideSql().<span style="color: #CC4747">selectList</span>(path, pmb, entityType);
     * for (SimpleMember member : memberList) {
     *     ... = member.get...();
     * }
     * </pre>
     * It needs to use customize-entity and parameter-bean.
     * The way to generate them is following:
     * <pre>
     * -- #df:entity#
     * -- !df:pmb!
     * -- !!Integer memberId!!
     * -- !!String memberName!!
     * -- !!...!!
     * </pre>
     * @param <ENTITY> The type of entity for element.
     * @param path The path of SQL file. (NotNull)
     * @param pmb The object as parameter-bean. Allowed types are Bean object and Map object. (NullAllowed)
     * @param entityType The element type of entity. (NotNull)
     * @return The result bean of selected list. (NotNull)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outsideSql is not found.
     * @throws org.dbflute.exception.DangerousResultSizeException When the result size is over the specified safety size.
     */
    def selectList[ENTITY](path: String, pmb: Object, entityType: Class[ENTITY]): ListResultBean[ENTITY] = {
        return executor.selectList(path, pmb, entityType);
    }

    // ===================================================================================
    //                                                                       Paging Select
    //                                                                       =============
    /**
     * Select page limited by SQL skip by the outside-SQL. <span style="color: #AD4747">{Typed Interface}</span><br>
     * (both count-select and paging-select are executed)<br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path and entity-type.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberName_PrefixSearch("S");
     * pmb.paging(20, 3); <span style="color: #3F7E5E">// 20 records per a page and current page number is 3</span>
     * PagingResultBean&lt;SimpleMember&gt; page
     *     = memberBhv.outsideSql().<span style="color: #CC4747">selectPage</span>(pmb);
     * int allRecordCount = page.getAllRecordCount();
     * int allPageCount = page.getAllPageCount();
     * boolean isExistPrePage = page.isExistPrePage();
     * boolean isExistNextPage = page.isExistNextPage();
     * ...
     * for (SimpleMember member : page) {
     *     ... = member.get...();
     * }
     * </pre>
     * The parameter-bean needs to extend SimplePagingBean.
     * The way to generate it is following:
     * <pre>
     * <span style="color: #3F7E5E">-- !df:pmb extends Paging!</span>
     * <span style="color: #3F7E5E">-- !!Integer memberId!!</span>
     * <span style="color: #3F7E5E">-- !!...!!</span>
     * </pre>
     * You can realize by pagingBean's isPaging() method on your 'Parameter Comment'.
     * It returns false when it executes Count. And it returns true when it executes Paging.
     * <pre>
     * e.g. ManualPaging and MySQL
     * <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     * select member.MEMBER_ID
     *      , member.MEMBER_NAME
     *      , memberStatus.MEMBER_STATUS_NAME
     * <span style="color: #3F7E5E">-- ELSE select count(*)</span>
     * <span style="color: #3F7E5E">/*END*/</span>
     *   from MEMBER member
     *     <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     *     left outer join MEMBER_STATUS memberStatus
     *       on member.MEMBER_STATUS_CODE = memberStatus.MEMBER_STATUS_CODE
     *     <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*BEGIN*/</span>
     *  where
     *    <span style="color: #3F7E5E">/*IF pmb.memberId != null*/</span>
     *    member.MEMBER_ID = <span style="color: #3F7E5E">/*pmb.memberId*/</span>'123'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *    <span style="color: #3F7E5E">/*IF pmb.memberName != null*/</span>
     *    and member.MEMBER_NAME like <span style="color: #3F7E5E">/*pmb.memberName*/</span>'Billy%'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     *  order by member.UPDATE_DATETIME desc
     *  <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     *  limit <span style="color: #3F7E5E">/*$pmb.pageStartIndex*/</span>80, <span style="color: #3F7E5E">/*$pmb.fetchSize*/</span>20
     *  <span style="color: #3F7E5E">/*END*/</span>
     * </pre>
     * @param <ENTITY> The type of entity.
     * @param pmb The typed parameter-bean for manual-paging handling. (NotNull)
     * @return The result bean of paging. (NotNull)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outside-SQL is not found.
     * @throws org.dbflute.exception.DangerousResultSizeException When the result size is over the specified safety size.
     */
    def selectPage[IMMU, DBLE <: DBableEntity[IMMU]](pmb: ImmutableManualPagingHandlingPmb[BEHAVIOR, IMMU, DBLE]): ScrPagingView[IMMU] = {
        val page = executor.manualPaging().selectPage(pmb);
        return createPagingView[IMMU](toScalaList(page).map(_.toImmutable()), page);
    }

    /**
     * Select list only of paging limited by SQL skip by the outside-SQL. <span style="color: #AD4747">{Typed Interface}</span><br>
     * (count-select is not executed, only paging-select)<br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path and entity-type.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberName_PrefixSearch("S");
     * pmb.paging(20, 3); <span style="color: #3F7E5E">// 20 records per a page and current page number is 3</span>
     * ListResultBean&lt;SimpleMember&gt; memberList
     *     = memberBhv.outsideSql().<span style="color: #CC4747">selectPagingListOnly</span>(pmb);
     * for (SimpleMember member : memberList) {
     *     ... = member.get...();
     * }
     * </pre>
     * The parameter-bean needs to extend SimplePagingBean.
     * The way to generate it is following:
     * <pre>
     * <span style="color: #3F7E5E">-- !df:pmb extends Paging!</span>
     * <span style="color: #3F7E5E">-- !!Integer memberId!!</span>
     * <span style="color: #3F7E5E">-- !!...!!</span>
     * </pre>
     * You don't need to use pagingBean's isPaging() method on your 'Parameter Comment'.
     * <pre>
     * e.g. ManualPaging and MySQL 
     * select member.MEMBER_ID
     *      , member.MEMBER_NAME
     *      , memberStatus.MEMBER_STATUS_NAME
     *   from MEMBER member
     *     left outer join MEMBER_STATUS memberStatus
     *       on member.MEMBER_STATUS_CODE = memberStatus.MEMBER_STATUS_CODE
     *  <span style="color: #3F7E5E">/*BEGIN*/</span>
     *  where
     *    <span style="color: #3F7E5E">/*IF pmb.memberId != null*/</span>
     *    member.MEMBER_ID = <span style="color: #3F7E5E">/*pmb.memberId*/</span>'123'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *    <span style="color: #3F7E5E">/*IF pmb.memberName != null*/</span>
     *    and member.MEMBER_NAME like <span style="color: #3F7E5E">/*pmb.memberName*/</span>'Billy%'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*END*/</span>
     *  order by member.UPDATE_DATETIME desc
     *  limit <span style="color: #3F7E5E">/*$pmb.pageStartIndex*/</span>80, <span style="color: #3F7E5E">/*$pmb.fetchSize*/</span>20
     * </pre>
     * @param <ENTITY> The type of entity.
     * @param pmb The typed parameter-bean for manual-paging handling. (NotNull)
     * @return The result bean of paged list. (NotNull)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outside-SQL is not found.
     * @throws org.dbflute.exception.DangerousResultSizeException When the result size is over the specified safety size.
     */
    def selectPagingListOnly[IMMU, DBLE <: DBableEntity[IMMU]](pmb: ImmutableManualPagingHandlingPmb[BEHAVIOR, IMMU, DBLE]): immutable.List[IMMU] = {
        return toScalaList(executor.manualPaging().selectPage(pmb)).map(_.toImmutable());
    }

    /**
     * Prepare paging by cursor-skip. <br>
     * Basically you should use paging limited by SQL like this:
     * <pre>
     * memberBhv.outsideSql().<span style="color: #CC4747">selectPage</span>(pmb);
     * </pre>
     * However if you have the reason why it cannot use paging limited by SQL-skip,
     * use this paging limited by cursor-skip.
     * @return The new-created executor of outsideSql for cursor-skip. (NotNull)
     */
    def pagingByCursorSkip(): ScrOutsideSqlTypedAutoPagingExecutor[BEHAVIOR] = {
        return createOutsideSqlTypedAutoPagingExecutor();
    }

    protected def createOutsideSqlTypedAutoPagingExecutor(): ScrOutsideSqlTypedAutoPagingExecutor[BEHAVIOR] = {
        return new ScrOutsideSqlTypedAutoPagingExecutor[BEHAVIOR](executor.autoPaging());
    }

    // ===================================================================================
    //                                                                       Cursor Select
    //                                                                       =============
    /**
     * Select the cursor of the entity by outside-SQL. <span style="color: #AD4747">{Typed Interface}</span><br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberName_PrefixSearch("S");
     * memberBhv.outsideSql().<span style="color: #CC4747">selectCursor</span>(pmb, new PurchaseSummaryMemberCursorHandler() {
     *     protected Object fetchCursor(PurchaseSummaryMemberCursor cursor) throws SQLException {
     *         while (cursor.next()) {
     *             Integer memberId = cursor.getMemberId();
     *             String memberName = cursor.getMemberName();
     *             ...
     *         }
     *         return null;
     *     }
     * });
     * </pre>
     * It needs to use type-safe-cursor instead of customize-entity.
     * The way to generate it is following:
     * <pre>
     * <span style="color: #3F7E5E">-- #df:entity#</span>
     * <span style="color: #3F7E5E">-- +cursor+</span>
     * </pre>
     * @param <ENTITY> The type of entity, might be void.
     * @param pmb The typed parameter-bean for cursor handling. (NotNull)
     * @param handler The handler of cursor called back with result set. (NotNull)
     * @return The result object that the cursor handler returns. (NullAllowed)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outside-SQL is not found.
     */
    def selectCursor[IMMU, DBLE <: DBableEntity[IMMU]](pmb: ImmutableCursorHandlingPmb[BEHAVIOR, IMMU, DBLE])(handler: CursorHandler): Object = {
        return executor.cursorHandling().selectCursor(pmb, handler);
    }

    // ===================================================================================
    //                                                                             Execute
    //                                                                             =======
    /**
     * Execute the outsideSql. (insert, update, delete, etc...) <span style="color: #AD4747">{Typed Interface}</span><br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberId(3);
     * int count = memberBhv.outsideSql().<span style="color: #CC4747">execute</span>(pmb);
     * </pre>
     * @param pmb The parameter-bean. Allowed types are Bean object and Map object. (NullAllowed)
     * @return The count of execution.
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outsideSql is not found.
     */
    def execute(pmb: ExecuteHandlingPmb[BEHAVIOR]): Int = {
        return executor.execute(pmb);
    }

    // [DBFlute-0.7.5]
    // ===================================================================================
    //                                                                      Procedure Call
    //                                                                      ==============
    /**
     * Call the procedure.
     * <pre>
     * SpInOutParameterPmb pmb = new SpInOutParameterPmb();
     * pmb.setVInVarchar("foo");
     * pmb.setVInOutVarchar("bar");
     * memberBhv.outsideSql().<span style="color: #CC4747">call</span>(pmb);
     * String outVar = pmb.getVOutVarchar();
     * </pre>
     * It needs to use parameter-bean for procedure (ProcedurePmb).
     * The way to generate is to set the option of DBFlute property and execute Sql2Entity.
     * @param pmb The parameter-bean for procedure. (NotNull)
     */
    def call(pmb: ProcedurePmb): Unit = {
        return executor.call(pmb);
    }

    // ===================================================================================
    //                                                                          Free Style
    //                                                                          ==========
    /**
     * Prepare free-style executor of outsideSql.
     * @return The new-created executor of outsideSql for free-style. (NotNull)
     */
    def freeStyle(): ScrOutsideSqlFreeStyleBasicExecutor[BEHAVIOR] = {
        return createOutsideSqlFreeStyleBasicExecutor();
    }

    protected def createOutsideSqlFreeStyleBasicExecutor(): ScrOutsideSqlFreeStyleBasicExecutor[BEHAVIOR] = {
        return new ScrOutsideSqlFreeStyleBasicExecutor[BEHAVIOR](executor);
    }

    // ===================================================================================
    //                                                                              Option
    //                                                                              ======
    // -----------------------------------------------------
    //                                       Remove from SQL
    //                                       ---------------
    /**
     * Set up remove-block-comment for this outsideSql.
     * @return this. (NotNull)
     */
    def removeBlockComment(): ScrOutsideSqlTypedBasicExecutor[BEHAVIOR] = {
        executor.removeBlockComment(); return this;
    }

    /**
     * Set up remove-line-comment for this outsideSql.
     * @return this. (NotNull)
     */
    def removeLineComment(): ScrOutsideSqlTypedBasicExecutor[BEHAVIOR] = {
        executor.removeLineComment(); return this;
    }

    // -----------------------------------------------------
    //                                            Format SQL
    //                                            ----------
    /**
     * Set up format-SQL for this outsideSql. <br>
     * (For example, empty lines removed)
     * @return this. (NotNull)
     */
    def formatSql(): ScrOutsideSqlTypedBasicExecutor[BEHAVIOR] = {
        executor.formatSql(); return this;
    }

    // -----------------------------------------------------
    //                                       StatementConfig
    //                                       ---------------
    /**
     * Configure statement JDBC options. (For example, queryTimeout, fetchSize, ...)
     * @param statementConfig The configuration of statement. (NullAllowed)
     * @return this. (NotNull)
     */
    def configure(statementConfig: StatementConfig): ScrOutsideSqlTypedBasicExecutor[BEHAVIOR] = {
        executor.configure(statementConfig); return this;
    }

    // ===================================================================================
    //                                                                        Scala Helper
    //                                                                        ============
    protected def toScalaList[ENTITY](javaList: Collection[ENTITY]): immutable.List[ENTITY] = {
        if (javaList == null) { scala.collection.immutable.List() }
        return immutable.List.fromArray(javaList.toArray()).asInstanceOf[immutable.List[ENTITY]];
    }

    protected def createPagingView[ENTITY](selectedList: immutable.List[ENTITY], bean: PagingResultBean[_]): ScrPagingView[ENTITY] = {
        return new ScrPagingView[ENTITY](selectedList, bean);
    }
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                  OutsideSql                                          _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                               AutoPaging Executor                    _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/                                                                      _/_/_/_/_/_/_/_/_/_/_/ */
/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

class ScrOutsideSqlTypedAutoPagingExecutor[BEHAVIOR](executor: OutsideSqlAutoPagingExecutor[BEHAVIOR]) {

    /**
     * Select page limited by cursor skip by the outside-SQL. <span style="color: #AD4747">{Typed Interface}</span><br>
     * (both count-select and paging-select are executed)<br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path and entity-type.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberName_PrefixSearch("S");
     * pmb.paging(20, 3); <span style="color: #3F7E5E">// 20 records per a page and current page number is 3</span>
     * PagingResultBean&lt;SimpleMember&gt; page
     *     = memberBhv.outsideSql().manualPaging().<span style="color: #CC4747">selectPage</span>(pmb);
     * int allRecordCount = page.getAllRecordCount();
     * int allPageCount = page.getAllPageCount();
     * boolean isExistPrePage = page.isExistPrePage();
     * boolean isExistNextPage = page.isExistNextPage();
     * ...
     * for (SimpleMember member : page) {
     *     ... = member.get...();
     * }
     * </pre>
     * The parameter-bean needs to extend SimplePagingBean.
     * The way to generate it is following:
     * <pre>
     * <span style="color: #3F7E5E">-- !df:pmb extends Paging!</span>
     * <span style="color: #3F7E5E">-- !!Integer memberId!!</span>
     * <span style="color: #3F7E5E">-- !!...!!</span>
     * </pre>
     * You can realize by pagingBean's isPaging() method on your 'Parameter Comment'.
     * It returns false when it executes Count. And it returns true when it executes Paging.
     * <pre>
     * e.g. ManualPaging and MySQL
     * <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     * select member.MEMBER_ID
     *      , member.MEMBER_NAME
     *      , memberStatus.MEMBER_STATUS_NAME
     * <span style="color: #3F7E5E">-- ELSE select count(*)</span>
     * <span style="color: #3F7E5E">/*END*/</span>
     *   from MEMBER member
     *     <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     *     left outer join MEMBER_STATUS memberStatus
     *       on member.MEMBER_STATUS_CODE = memberStatus.MEMBER_STATUS_CODE
     *     <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*BEGIN*/</span>
     *  where
     *    <span style="color: #3F7E5E">/*IF pmb.memberId != null*/</span>
     *    member.MEMBER_ID = <span style="color: #3F7E5E">/*pmb.memberId*/</span>'123'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *    <span style="color: #3F7E5E">/*IF pmb.memberName != null*/</span>
     *    and member.MEMBER_NAME like <span style="color: #3F7E5E">/*pmb.memberName*/</span>'Billy%'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     *  order by member.UPDATE_DATETIME desc
     *  <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*IF pmb.isPaging()*/</span>
     *  limit <span style="color: #3F7E5E">/*$pmb.pageStartIndex*/</span>80, <span style="color: #3F7E5E">/*$pmb.fetchSize*/</span>20
     *  <span style="color: #3F7E5E">/*END*/</span>
     * </pre>
     * @param <ENTITY> The type of entity.
     * @param pmb The typed parameter-bean for auto-paging handling. (NotNull)
     * @return The result bean of paging. (NotNull)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outside-SQL is not found.
     * @throws org.dbflute.exception.DangerousResultSizeException When the result size is over the specified safety size.
     */
    def selectPage[IMMU, DBLE <: DBableEntity[IMMU]](pmb: ImmutableAutoPagingHandlingPmb[BEHAVIOR, IMMU, DBLE]): ScrPagingView[IMMU] = {
        val page = executor.selectPage(pmb);
        return createPagingView[IMMU](toScalaList(page).map(_.toImmutable()), page);
    }

    /**
     * Select list only of paging limited by cursor skip by the outside-SQL. <span style="color: #AD4747">{Typed Interface}</span><br>
     * (count-select is not executed, only paging-select)<br>
     * You can call this method by only a typed parameter-bean
     * which is related to its own (outside-SQL) path and entity-type.
     * <pre>
     * SimpleMemberPmb pmb = new SimpleMemberPmb();
     * pmb.setMemberName_PrefixSearch("S");
     * pmb.paging(20, 3); <span style="color: #3F7E5E">// 20 records per a page and current page number is 3</span>
     * ListResultBean&lt;SimpleMember&gt; memberList
     *     = memberBhv.outsideSql().pagingByCursorSkip().<span style="color: #CC4747">selectPagingListOnly</span>(pmb);
     * for (SimpleMember member : memberList) {
     *     ... = member.get...();
     * }
     * </pre>
     * The parameter-bean needs to extend SimplePagingBean.
     * The way to generate it is following:
     * <pre>
     * <span style="color: #3F7E5E">-- !df:pmb extends Paging!</span>
     * <span style="color: #3F7E5E">-- !!Integer memberId!!</span>
     * <span style="color: #3F7E5E">-- !!...!!</span>
     * </pre>
     * You don't need to use pagingBean's isPaging() method on your 'Parameter Comment'.
     * <pre>
     * e.g. ManualPaging and MySQL 
     * select member.MEMBER_ID
     *      , member.MEMBER_NAME
     *      , memberStatus.MEMBER_STATUS_NAME
     *   from MEMBER member
     *     left outer join MEMBER_STATUS memberStatus
     *       on member.MEMBER_STATUS_CODE = memberStatus.MEMBER_STATUS_CODE
     *  <span style="color: #3F7E5E">/*BEGIN*/</span>
     *  where
     *    <span style="color: #3F7E5E">/*IF pmb.memberId != null*/</span>
     *    member.MEMBER_ID = <span style="color: #3F7E5E">/*pmb.memberId*/</span>'123'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *    <span style="color: #3F7E5E">/*IF pmb.memberName != null*/</span>
     *    and member.MEMBER_NAME like <span style="color: #3F7E5E">/*pmb.memberName*/</span>'Billy%'
     *    <span style="color: #3F7E5E">/*END*/</span>
     *  <span style="color: #3F7E5E">/*END*/</span>
     *  order by member.UPDATE_DATETIME desc
     *  limit <span style="color: #3F7E5E">/*$pmb.pageStartIndex*/</span>80, <span style="color: #3F7E5E">/*$pmb.fetchSize*/</span>20
     * </pre>
     * @param <ENTITY> The type of entity.
     * @param pmb The typed parameter-bean for auto-paging handling. (NotNull)
     * @return The result bean of paged list. (NotNull)
     * @throws org.dbflute.exception.OutsideSqlNotFoundException When the outside-SQL is not found.
     * @throws org.dbflute.exception.DangerousResultSizeException When the result size is over the specified safety size.
     */
    def selectPagingListOnly[IMMU, DBLE <: DBableEntity[IMMU]](pmb: ImmutableAutoPagingHandlingPmb[BEHAVIOR, IMMU, DBLE]): immutable.List[IMMU] = {
        return toScalaList(executor.selectPage(pmb)).map(_.toImmutable());
    }

    // ===================================================================================
    //                                                                        Scala Helper
    //                                                                        ============
    protected def toScalaList[ENTITY](javaList: Collection[ENTITY]): immutable.List[ENTITY] = {
        if (javaList == null) { scala.collection.immutable.List() }
        return immutable.List.fromArray(javaList.toArray()).asInstanceOf[immutable.List[ENTITY]];
    }

    protected def createPagingView[ENTITY](selectedList: immutable.List[ENTITY], bean: PagingResultBean[_]): ScrPagingView[ENTITY] = {
        return new ScrPagingView[ENTITY](selectedList, bean);
    }
}
