##
## Copyright 2014-2019 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCommon};

import org.dbflute.BehaviorSelector;
import org.dbflute.bhv.BehaviorReadable;
import com.google.inject.Injector;
import ${glPackageExtendedBhv}._;

/**
 * @author DBFlute(AutoGenerator)
 */
object ${glDBFlutist} {

    protected var injector: Injector = null;
    protected var selector: BehaviorSelector = null;

    def play(injector: Injector): Unit = {
        this.injector = injector;
    }
#foreach ($table in $database.behaviorTableList)

    def ${table.behaviorInstanceMethodName}(): ${table.extendedBehaviorClassName} = {
        return select(classOf[${table.extendedBehaviorClassName}]);
    }
#end

    protected def select[BEHAVIOR <: BehaviorReadable](behaviorType: Class[BEHAVIOR]): BEHAVIOR = {
        if (selector == null) {
            this.synchronized {
                if (selector == null) {
                    selector = injector.getInstance(classOf[BehaviorSelector]);
                }
            }
        }
        return selector.select(behaviorType)
    }
}
