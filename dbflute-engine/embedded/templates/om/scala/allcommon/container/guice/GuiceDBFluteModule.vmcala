##
## Copyright 2014-2019 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCommon};

import javax.sql.DataSource;

import com.google.inject.AbstractModule;
import org.dbflute.bhv._;
import org.dbflute.bhv.core.BehaviorCommandInvoker;
import org.dbflute.bhv.core.InvokerAssistant;
import org.dbflute.hook.CommonColumnAutoSetupper;
import ${glPackageExtendedBhv}._;
import ${glPackageCB}._;
import ${glPackageExtendedEntity}._;

/**
 * @author ${database.classAuthor}
 */
class ${glDBFluteModule}(dataSource: DataSource) extends AbstractModule {

    @Override
    protected def configure(): Unit = {
        createDBFluteInitializer(); // initialized by only a creation

        // The components of DBFlute Runtime.
        val behaviorSelector: ${glImplementedBehaviorSelector} = createImplementedBehaviorSelector();
        val behaviorCommandInvoker: BehaviorCommandInvoker = createBehaviorCommandInvoker();
        val invokerAssistant: ${glImplementedInvokerAssistant} = createImplementedInvokerAssistant();
        behaviorCommandInvoker.setInvokerAssistant(invokerAssistant);
        val commonColumnAutoSetupper: ${glImplementedCommonColumnAutoSetupper} = createImplementedCommonColumnAutoSetupper();

        bind(classOf[BehaviorSelector]).toInstance(behaviorSelector);
        bind(classOf[BehaviorCommandInvoker]).toInstance(behaviorCommandInvoker);
        bind(classOf[InvokerAssistant]).toInstance(invokerAssistant);
        bind(classOf[CommonColumnAutoSetupper]).toInstance(commonColumnAutoSetupper);

        // The components of Behavior.
        setupBehavior(behaviorCommandInvoker, behaviorSelector, commonColumnAutoSetupper);
    }

    protected def createDBFluteInitializer(): ${glDBFluteInitializer} = {
        return new ${database.DBFluteInitializerClass}();
    }

    protected def createImplementedBehaviorSelector(): ${glImplementedBehaviorSelector} = {
        return new ${glImplementedBehaviorSelector}();
    }

    protected def createBehaviorCommandInvoker(): BehaviorCommandInvoker = {
        return new BehaviorCommandInvoker();
    }

    protected def createImplementedInvokerAssistant(): ${glImplementedInvokerAssistant} = {
        val invokerAssistant: ${glImplementedInvokerAssistant} = new ${database.implementedInvokerAssistantClass}();
        invokerAssistant.setDataSource(dataSource);
        return invokerAssistant;
    }

    protected def createImplementedCommonColumnAutoSetupper(): ${glImplementedCommonColumnAutoSetupper} = {
        return new ${database.implementedCommonColumnAutoSetupperClass}();
    }

    protected def setupBehavior(ker: BehaviorCommandInvoker, tor: BehaviorSelector, per: CommonColumnAutoSetupper): Unit = {
        // #avoided unknown compile error 'illegal cyclic reference'
        // if directly create the behaviors so use reflection here
#foreach ($table in $database.behaviorTableList)
        {
            val bhv = Class.forName("${table.extendedBehaviorFullClassName}").newInstance().asInstanceOf[${table.baseBehaviorExtendsClassName}[${table.extendedEntityClassName}, ${table.extendedConditionBeanClassName}]];
#if ($table.isWritable())
            bhv.setBehaviorCommandInvoker(ker); bhv.setBehaviorSelector(tor); bhv.setCommonColumnAutoSetupper(per);
#else
            bhv.setBehaviorCommandInvoker(ker); bhv.setBehaviorSelector(tor);
#end
            bind(classOf[${table.extendedBehaviorClassName}]).toInstance(bhv.asInstanceOf[${table.extendedBehaviorClassName}]);
        }
#end
    }
}
