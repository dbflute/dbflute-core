##
## Copyright 2014-2019 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCommon};

import scala.collection.JavaConverters._

import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dbflute.bhv.BehaviorReadable;
import org.dbflute.bhv.BehaviorSelector;
import org.dbflute.dbmeta.DBMeta;
import org.dbflute.exception.IllegalBehaviorStateException;
import org.dbflute.util.DfTraceViewUtil;
import org.dbflute.util.DfTypeUtil;
import org.dbflute.util.Srl;

#if ($database.isTargetContainerSeasar())
import org.seasar.framework.container.S2Container;
import org.seasar.framework.container.ComponentNotFoundRuntimeException;
#end
#if ($database.isTargetContainerSpring())
import org.springframework.context.ApplicationContext;
#end
#if ($database.isTargetContainerLucy())
import org.t2framework.lucy.Lucy;
#end
#if ($database.isTargetContainerGuice())
import com.google.inject.Inject;
import com.google.inject.Injector;
#end
#if ($database.isTargetContainerSlim3())
import org.slim3.container.S3Container;
#end
#if ($database.isTargetContainerCDI())
import javax.enterprise.context.spi.CreationalContext;
import javax.enterprise.inject.spi.Bean;
import javax.enterprise.inject.spi.BeanManager;
#end

/**
 * The implementation of behavior selector.
 * @author DBFlute(AutoGenerator)
 */
class ${glImplementedBehaviorSelector} extends BehaviorSelector {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** The logger instance for this class. (NotNull) */
    private val _log: Log = LogFactory.getLog(classOf[${glImplementedBehaviorSelector}]);

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** The concurrent cache of behavior. */
    protected var _behaviorCache: Map[Class[_ <: BehaviorReadable], BehaviorReadable] = new ConcurrentHashMap();

#if ($database.isTargetContainerSeasar())
    /** The container of Seasar. */
    protected var _container: S2Container = null;
#end
#if ($database.isTargetContainerSpring())
    /** The container of Spring. */
    protected var _container: ApplicationContext = null;
#end
#if ($database.isTargetContainerLucy())
    /** The container of Lucy. */
    protected var _container: Lucy = null;
#end
#if ($database.isTargetContainerGuice())
    /** The container of Guice. */
    protected var _container: Injector = null;
#end
#if ($database.isTargetContainerSlim3())
    /** The container of Slim3. */
    protected var _container: S3Container = null;
#end
#if ($database.isTargetContainerCDI())
    /** The container of CDI. */
    protected var _container: BeanManager = null;
#end

    // ===================================================================================
    //                                                                          Initialize
    //                                                                          ==========
    /**
     * Initialize condition-bean meta data.
     */
    def initializeConditionBeanMetaData(): Unit = {
        val dbmetaMap: Map[String, DBMeta] = ${glDBMetaInstanceHandler}.getUnmodifiableDBMetaMap();
        val dbmetas: Collection[DBMeta] = dbmetaMap.values();
        var before: Long = 0;
        if (_log.isInfoEnabled()) {
            before = System.currentTimeMillis();
            _log.info("...Initializing condition-bean meta data");
        }
        var count: Int = 0;
        dbmetas.asScala.foreach(dbmeta => {
            try {
                val bhv: BehaviorReadable = byName(dbmeta.getTableDbName());
                bhv.warmUpCommand();
                count = count + 1;
            } catch { // means the behavior is suppressed
                case ignored: IllegalBehaviorStateException => {
                    if (_log.isDebugEnabled()) {
                        _log.debug("No behavior for " + dbmeta.getTableDbName());
                    }
                }
            }
        });
        if (_log.isInfoEnabled()) {
            val after: Long = System.currentTimeMillis();
            _log.info("CB initialized: " + count + " [" + DfTraceViewUtil.convertToPerformanceView(after - before) + "]");
        }
    }

    // ===================================================================================
    //                                                                            Selector
    //                                                                            ========
    /**
     * Select behavior instance by the type.
     * @param <BEHAVIOR> The type of behavior.
     * @param behaviorType Behavior type. (NotNull)
     * @return The selected instance of the behavior. (NotNull)
     */
    def select[BEHAVIOR <: BehaviorReadable](behaviorType: Class[BEHAVIOR]): BEHAVIOR = {
        var bhv: BEHAVIOR = _behaviorCache.get(behaviorType).asInstanceOf[BEHAVIOR];
        if (bhv != null) {
            return bhv;
        }
        _behaviorCache.synchronized {
            bhv = _behaviorCache.get(behaviorType).asInstanceOf[BEHAVIOR];
            if (bhv != null) {
                // a previous thread might have initialized
                // or reading might failed by same-time writing
                return bhv;
            }
            bhv = getComponent(behaviorType).asInstanceOf[BEHAVIOR];
            _behaviorCache.put(behaviorType, bhv);
            return bhv;
        }
    }

    /**
     * Select behavior (as readable type) by name.
     * @param tableFlexibleName The flexible-name of table. (NotNull)
     * @return The instance of found behavior. (NotNull)
     * @throws org.dbflute.exception.DBMetaNotFoundException When the table is not found.
     * @throws org.dbflute.exception.IllegalBehaviorStateException When the behavior class is suppressed.
     */
    def byName(tableFlexibleName: String): BehaviorReadable = {
        assertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
        val dbmeta: DBMeta = ${glDBMetaInstanceHandler}.findDBMeta(tableFlexibleName);
        return select(getBehaviorType(dbmeta));
    }

    /**
     * Get behavior-type by DB meta.
     * @param dbmeta The instance of DB meta for the behavior. (NotNull)
     * @return The type of behavior (as readable type). (NotNull)
     * @throws org.dbflute.exception.IllegalBehaviorStateException When the behavior class is suppressed.
     */
    protected def getBehaviorType(dbmeta: DBMeta): Class[BehaviorReadable] = {
        val behaviorTypeName: String = dbmeta.getBehaviorTypeName();
        if (behaviorTypeName == null) {
            val msg: String = "The dbmeta.getBehaviorTypeName() should not return null: dbmeta=" + dbmeta;
            throw new IllegalStateException(msg);
        }
        val behaviorType: Class[BehaviorReadable] = try {
            Class.forName(behaviorTypeName).asInstanceOf[Class[BehaviorReadable]];
        } catch {
            case e: ClassNotFoundException => {
                throw new IllegalBehaviorStateException("The class does not exist: " + behaviorTypeName, e);
            }
        }
        return behaviorType;
    }

    // ===================================================================================
    //                                                                           Component
    //                                                                           =========
#if ($database.isTargetContainerSeasar() || $database.isTargetContainerSpring() || $database.isTargetContainerLucy() || $database.isTargetContainerCDI())
    @SuppressWarnings("unchecked")
#end
    protected def getComponent[COMPONENT](componentType: Class[COMPONENT]): COMPONENT = { // only for behavior
        assertObjectNotNull("componentType", componentType);
        assertObjectNotNull("_container", _container);
#if ($database.isTargetContainerSeasar())
        try {
		    return (COMPONENT)_container.getComponent(componentType).asInstanceOf[COMPONENT];
		} catch { // Normally it doesn't come.
		    case e: ComponentNotFoundRuntimeException => {
		        val component: COMPONENT = try {
		            // for HotDeploy Mode
    		        component = _container.getRoot().getComponent(componentType).asInstanceOf[COMPONENT];
	    	    } catch (ComponentNotFoundRuntimeException ignored) {
	    	        case ignored: ComponentNotFoundRuntimeException => {
		                throw e;
		            }
		        }
    		    _container = _container.getRoot(); // Change container.
	    	    return component;
		    }
		}
#end
#if ($database.isTargetContainerSpring())
		return _container.getBean(replace(initUncap(toClassTitle(componentType)), "${database.dollar}", "")).asInstanceOf[COMPONENT];
#end
#if ($database.isTargetContainerLucy())
		return _container.get(initUncap(toClassTitle(componentType))).asInstanceOf[COMPONENT];
#end
#if ($database.isTargetContainerGuice())
		return _container.getInstance(componentType);
#end
#if ($database.isTargetContainerSlim3())
		return _container.lookup(toClassTitle(componentType));
#end
#if ($database.isTargetContainerCDI())
        var result: COMPONENT = null;
        val bean: Bean[COMPONENT] = _container.resolve(_container.getBeans(componentType)).asInstanceOf[Bean[COMPONENT]];
        if (bean != null) {
            val context: CreationalContext[COMPONENT] = _container.createCreationalContext(bean);
            if (context != null) {
                result = _container.getReference(bean, componentType, context).asInstanceOf[COMPONENT];
            }
        }
        return result;
#end
    }

    // ===================================================================================
    //                                                                      General Helper
    //                                                                      ==============
    protected def replace(str: String, fromStr: String, toStr: String): String = {
        return Srl.replace(str, fromStr, toStr);
    }

    protected def initUncap(str: String): String = {
        return str.substring(0, 1).toLowerCase() + str.substring(1);
    }

    protected def toClassTitle(obj: Object): String = {
        return DfTypeUtil.toClassTitle(obj);
    }

    // ===================================================================================
    //                                                                              Assert
    //                                                                              ======
    // -----------------------------------------------------
    //                                         Assert Object
    //                                         -------------
    /**
     * Assert that the object is not null.
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     * @throws IllegalArgumentException
     */
    protected def assertObjectNotNull(variableName: String, value: Object): Unit = {
        if (variableName == null) {
            val msg: String = "The value should not be null: variableName=null value=" + value;
            throw new IllegalArgumentException(msg);
        }
        if (value == null) {
            val msg: String = "The value should not be null: variableName=" + variableName;
            throw new IllegalArgumentException(msg);
        }
    }

    // -----------------------------------------------------
    //                                         Assert String
    //                                         -------------
    /**
     * Assert that the entity is not null and not trimmed empty.
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     */
    protected def assertStringNotNullAndNotTrimmedEmpty(variableName: String, value: String): Unit = {
        assertObjectNotNull("variableName", variableName);
        assertObjectNotNull("value", value);
        if (value.trim().length() == 0) {
            val msg: String = "The value should not be empty: variableName=" + variableName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#if ($database.isTargetContainerSeasar())
    def setContainer(container: S2Container): Unit = {
        this._container = container;
    }
#end
#if ($database.isTargetContainerSpring())
    def setContainer(container: ApplicationContext): Unit = {
        this._container = container;
    }
#end
#if ($database.isTargetContainerLucy())
    def setContainer(container: Lucy): Unit = {
        this._container = container;
    }
#end
#if ($database.isTargetContainerGuice())
    @Inject
    def setContainer(container: Injector): Unit = {
        this._container = container;
    }
#end
#if ($database.isTargetContainerSlim3())
    def setContainer(container: S3Container): Unit = {
        this._container = container;
    }
#end
#if ($database.isTargetContainerCDI())
    def setContainer(container: BeanManager): Unit = {
        this._container = container;
    }
#end
}
