##
## Copyright 2014-2019 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${myReferrerLoaderPackageName};
#set ($myClassName = "${myReferrerLoaderClassName}")

import scala.collection.immutable;
import scala.collection.JavaConverters._;

import java.util.Collection;
import java.util.List;

import org.dbflute.bhv._;
#if ($table.hasLoadReferrer())
import org.dbflute.bhv.referrer._;
#end
import ${glPackageBaseCommon}._;
import ${glPackageExtendedBhv}._;
import ${glPackageExtendedEntity}._;
#if ($table.hasLoadReferrer())
import ${glPackageCB}._;
#end

/**
 * The referrer loader of ${table.basicInfoDispString}. <br>
 * <pre>
 * [primary key]
 *     ${table.primaryKeyNameCommaString}
 *
 * [column]
 *     ${table.columnNameCommaString}
 *
 * [sequence]
 *     ${table.definedSequenceName}
 *
 * [identity]
 *     ${table.identityColumnName}
 *
 * [version-no]
 *     ${table.versionNoColumnName}
 *
 * [foreign table]
 *     ${table.foreignTableNameCommaString}
 *
 * [referrer table]
 *     ${table.referrerTableNameCommaString}
 *
 * [foreign property]
 *     ${table.foreignPropertyNameCommaString}
 *
 * [referrer property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.classAuthor}
 */
class ${myClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected var _selectedList: List[${myExtendedObjectClassName}] = null;
    protected var _selector: BehaviorSelector = null;
    protected var _myBhv: ${myExtendedBhvClassName} = null; // lazy-loaded

    // ===================================================================================
    //                                                                   Ready for Loading
    //                                                                   =================
    def ready(selectedList: List[${myExtendedObjectClassName}], selector: BehaviorSelector): ${myClassName} =
    { _selectedList = selectedList; _selector = selector; return this; }

    protected def myBhv: ${myExtendedBhvClassName} =
    { if (_myBhv != null) { _myBhv } else { _myBhv = _selector.select(classOf[${myExtendedBhvClassName}]); _myBhv } }

#if ($table.hasLoadReferrer())
    // ===================================================================================
    //                                                                       Load Referrer
    //                                                                       =============
#foreach ($referrer in $table.referrerAsManyList)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($referrerCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($referrerLoaderClassName = "${referrer.referrerTableExtendedReferrerLoaderClassName}")
#set ($loadMethodReturn = "Unit")
#if ($referrer.table.hasReferrerLoader())
#set ($loadMethodReturn = "ScrNestedReferrerLoaderGateway[${referrerLoaderClassName}]")
#end
    protected var _referrer${referrer.referrerPropertyNameInitCap}: List[${referrerEntityClassName}] = null;
    def load${referrer.referrerPropertyNameInitCap}(cbCall: (${referrerCBClassName}) => Unit): ${loadMethodReturn} = {
        myBhv.load${referrer.referrerPropertyNameInitCap}(_selectedList, cbCall).withNestedReferrer(new ReferrerListHandler[${referrerEntityClassName}]() {
            def handle(referrerList: List[${referrerEntityClassName}]): Unit = { _referrer${referrer.referrerPropertyNameInitCap} = referrerList; }
        });
#if ($referrer.table.hasReferrerLoader())
        return createNested(() => { new ${referrerLoaderClassName}().ready(_referrer${referrer.referrerPropertyNameInitCap}, _selector); });
#end
    }

#end
#end
    // ===================================================================================
    //                                                                    Pull out Foreign
    //                                                                    ================
#foreach ($fk in $table.foreignKeys)
#if ($fk.foreignTable.hasReferrerLoader())
#set ($foreignEntityClassName = "${fk.foreignTableExtendedEntityClassName}")
#set ($foreignLoaderClassName = "${fk.foreignTableExtendedReferrerLoaderClassName}")
#set ($foreignLoaderVariableName = "_foreign${fk.foreignPropertyNameInitCap}Loader")
    protected var ${foreignLoaderVariableName}: ${foreignLoaderClassName} = null;
    def pullout${fk.foreignPropertyNameInitCap}(): ${foreignLoaderClassName} = {
        if (${foreignLoaderVariableName} != null) { return ${foreignLoaderVariableName}; }
        val pulledList = myBhv.pullout${fk.foreignPropertyNameInitCap}(toScalaList(_selectedList).map(new ${myImmutableExtendedObjectClassName}(_))).map(new ${foreignEntityClassName}().acceptImmutable(_)).asJava;
        ${foreignLoaderVariableName} = new ${foreignLoaderClassName}().ready(pulledList, _selector);
        return ${foreignLoaderVariableName};
    }

#end
#end
#foreach ($referrer in $table.referrerAsOneList)
#if ($referrer.table.hasReferrerLoader())
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($referrerLoaderClassName = "${referrer.referrerTableExtendedReferrerLoaderClassName}")
#set ($referrerLoaderVariableName = "_foreign${referrer.referrerPropertyNameInitCapAsOne}Loader")
    protected var ${referrerLoaderVariableName}: ${referrerLoaderClassName} = null;
    def pullout${referrer.referrerPropertyNameInitCapAsOne}(): ${referrerLoaderClassName} = {
        if (${referrerLoaderVariableName} != null) { return ${referrerLoaderVariableName}; }
        val pulledList = myBhv.pullout${referrer.referrerPropertyNameInitCapAsOne}(toScalaList(_selectedList).map(new ${myImmutableExtendedObjectClassName}(_))).map(new ${referrerEntityClassName}().acceptImmutable(_)).asJava;
        ${referrerLoaderVariableName} = new ${referrerLoaderClassName}().ready(pulledList, _selector);
        return ${referrerLoaderVariableName};
    }

#end
#end
    // ===================================================================================
    //                                                                       Assist Helper
    //                                                                       =============
    protected def createNested[LOADER](loaderCall: () => LOADER): ScrNestedReferrerLoaderGateway[LOADER] =
    { return new ScrNestedReferrerLoaderGateway[LOADER](loaderCall); }

    protected def toScalaList[ENTITY](javaList: Collection[ENTITY]): immutable.List[ENTITY] = {
        if (javaList == null) { immutable.List() }
        return immutable.List.fromArray(javaList.toArray()).asInstanceOf[immutable.List[ENTITY]];
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    def selectedList: List[${myExtendedObjectClassName}] = { _selectedList }
    def selector: BehaviorSelector = { _selector }
}
