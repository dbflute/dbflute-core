##
## Copyright 2014-2019 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${myBaseCursorPackageName};
#set ($myClassName = "${myBaseTypeSafeCursorHandlerClassName}")
import java.sql.ResultSet;
import java.sql.SQLException;

import org.dbflute.jdbc.CursorHandler;
import ${myExtendedCursorPackageName}.${myExtendedTypeSafeCursorClassName};
import ${myExtendedCursorPackageName}.${myExtendedTypeSafeCursorHandlerClassName};

/**
 * The base class of companion object defined at extended class to create cursor handler.
 * @author ${database.classAuthor}
 */
abstract class ${myCompanionBaseTypeSafeCursorHandlerClassName} {
    def apply(handlerCall: (${myExtendedTypeSafeCursorClassName}) => Unit): ${myExtendedTypeSafeCursorHandlerClassName} = {
        return new ${myExtendedTypeSafeCursorHandlerClassName}() {
            protected def fetchCursor(cursor: ${myExtendedTypeSafeCursorClassName}): Object =
            { handlerCall(cursor); return null; }
        }
    }
}

/**
 * The cursor handler of ${table.tableDbName}.
 * @author ${database.classAuthor}
 */
abstract class ${myClassName} extends CursorHandler {

    /**
     * Handle the cursor.
     * @param rs The cursor (result set) for the query, which has first pointer. (NotNull)
     * @return The result object of handling process. (NullAllowed)
     * @throws SQLException When it fails to handle the SQL.
     */
    def handle(rs: ResultSet): Object = {
        return fetchCursor(createTypeSafeCursor(rs));
    }

    /**
     * Create the type-safe cursor.
     * @param rs The cursor (result set) for the query, which has first pointer. (NotNull)
     * @return The created type-safe cursor. (NotNull)
     * @throws SQLException When it fails to handle the SQL.
     */
    protected def createTypeSafeCursor(rs: ResultSet): ${myExtendedTypeSafeCursorClassName} = {
        val cursor = new ${myExtendedTypeSafeCursorClassName}();
        cursor.accept(rs);
        return cursor;
    }

    /**
     * Fetch the cursor.
     * @param cursor The type-safe cursor for the query, which has first pointer. (NotNull)
     * @return The result object of handling process. (NullAllowed)
     * @throws SQLException When it fails to handle the SQL.
     */
    protected def fetchCursor(cursor: ${myExtendedTypeSafeCursorClassName}): Object;
}
