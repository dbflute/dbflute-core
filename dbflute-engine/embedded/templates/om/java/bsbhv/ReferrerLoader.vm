##
## Copyright 2014-2019 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${myReferrerLoaderPackageName};
#set ($myClassName = "${myReferrerLoaderClassName}")

import java.util.List;

import org.dbflute.bhv.*;
#if ($table.hasLoadReferrer())
import org.dbflute.bhv.referrer.*;
#end
import ${glPackageExtendedBhv}.*;
import ${glPackageExtendedEntity}.*;
#if ($table.hasLoadReferrer())
import ${glPackageCB}.*;
#end

/**
 * The referrer loader of ${table.basicInfoDispString}. <br>
 * <pre>
 * [primary key]
 *     ${table.primaryKeyNameCommaString}
 *
 * [column]
 *     ${table.columnNameCommaString}
 *
 * [sequence]
 *     ${table.definedSequenceName}
 *
 * [identity]
 *     ${table.identityColumnName}
 *
 * [version-no]
 *     ${table.versionNoColumnName}
 *
 * [foreign table]
 *     ${table.foreignTableNameCommaString}
 *
 * [referrer table]
 *     ${table.referrerTableNameCommaString}
 *
 * [foreign property]
 *     ${table.foreignPropertyNameCommaString}
 *
 * [referrer property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.classAuthor}
 */
public class ${myClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected List<${myExtendedObjectClassName}> _selectedList;
    protected BehaviorSelector _selector;
    protected ${myExtendedBhvClassName} _myBhv; // lazy-loaded

    // ===================================================================================
    //                                                                   Ready for Loading
    //                                                                   =================
    public ${myClassName} ready(List<${myExtendedObjectClassName}> selectedList, BehaviorSelector selector)
    { _selectedList = selectedList; _selector = selector; return this; }

    protected ${myExtendedBhvClassName} myBhv()
    { if (_myBhv != null) { return _myBhv; } else { _myBhv = _selector.select(${myExtendedBhvClassName}.class); return _myBhv; } }

#if ($table.hasLoadReferrer())
    // ===================================================================================
    //                                                                       Load Referrer
    //                                                                       =============
#foreach ($referrer in $table.referrerAsManyList)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($referrerCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($referrerLoaderClassName = "${referrer.referrerTableExtendedReferrerLoaderClassName}")
#set ($referrerMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($loadMethodReturn = "void")
#if ($referrer.table.hasReferrerLoader())
#set ($loadMethodReturn = "NestedReferrerLoaderGateway<${referrerLoaderClassName}>")
#end
    protected List<${referrerEntityClassName}> _referrer${referrerMethodIdentityName};

    /**
     * Load referrer of ${referrer.referrerJavaBeansRulePropertyName} by the set-upper of referrer. <br>
     * ${referrer.referrerDispForJavaDoc}
     * <pre>
     * <span style="color: #0000C0">${myEntityVariableName}Bhv</span>.<span style="color: #994747">load</span>(<span style="color: #553000">${myEntityListVariableName}</span>, <span style="color: #553000">${table.lambdaShortName}Loader</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">${table.lambdaShortName}Loader</span>.<span style="color: #CC4747">load${referrerMethodIdentityName}</span>(<span style="color: #553000">${referrer.referrerLambdaExampleCBName}</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *         <span style="color: #553000">${referrer.referrerLambdaExampleCBName}</span>.setupSelect...
     *         <span style="color: #553000">${referrer.referrerLambdaExampleCBName}</span>.query().set...
     *         <span style="color: #553000">${referrer.referrerLambdaExampleCBName}</span>.query().addOrderBy...
     *     }); <span style="color: #3F7E5E">// you can load nested referrer from here</span>
     *     <span style="color: #3F7E5E">//}).withNestedReferrer(<span style="color: #553000">${referrer.referrerLambdaShortName}Loader</span> -&gt; {</span>
     *     <span style="color: #3F7E5E">//    ${referrer.referrerLambdaShortName}Loader.load...</span>
     *     <span style="color: #3F7E5E">//});</span>
     * });
     * for (${myExtendedObjectClassName} ${myEntityVariableName} : <span style="color: #553000">${myEntityListVariableName}</span>) {
     *     ... = ${myEntityVariableName}.<span style="color: #CC4747">get${referrer.referrerJavaBeansRulePropertyNameInitCap}()</span>;
     * }
     * </pre>
     * About internal policy, the value of primary key (and others too) is treated as case-insensitive. <br>
     * The condition-bean, which the set-upper provides, has settings before callback as follows:
     * <pre>
#if ($referrer.isSimpleKeyFK())
     * cb.query().set${referrer.getLocalColumnJavaNameAsOne()}_InScope(pkList);
     * cb.query().addOrderBy_${referrer.getLocalColumnJavaNameAsOne()}_Asc();
#else
     * cb.query().set[ForeignKey]_InScope(pkList);
     * cb.query().addOrderBy_[ForeignKey]_Asc();
#end
     * </pre>
     * @param refCBLambda The callback to set up referrer condition-bean for loading referrer. (NotNull)
#if ($referrer.table.hasReferrerLoader())
     * @return The callback interface which you can load nested referrer by calling withNestedReferrer(). (NotNull)
#end
     */
    public ${loadMethodReturn} load${referrerMethodIdentityName}(${table.loadReferrerConditionSetupperName}<${referrerCBClassName}> refCBLambda) {
        myBhv().load${referrerMethodIdentityName}(_selectedList, refCBLambda).withNestedReferrer(refLs -> _referrer${referrerMethodIdentityName} = refLs);
#if ($referrer.table.hasReferrerLoader())
        return hd -> hd.handle(new ${referrerLoaderClassName}().ready(_referrer${referrerMethodIdentityName}, _selector));
#end
    }

#end
#end
    // ===================================================================================
    //                                                                    Pull out Foreign
    //                                                                    ================
#foreach ($fk in $table.foreignKeys)
#if ($fk.foreignTable.hasReferrerLoader())
#set ($foreignEntityClassName = "${fk.foreignTableExtendedEntityClassName}")
#set ($foreignImmutableEntityClassName = "${fk.foreignTableExtendedEntityClassName}")
#set ($foreignLoaderClassName = "${fk.foreignTableExtendedReferrerLoaderClassName}")
#set ($foreignLoaderVariableName = "_foreign${fk.foreignPropertyNameInitCap}Loader")
    protected ${foreignLoaderClassName} ${foreignLoaderVariableName};
    public ${foreignLoaderClassName} pullout${fk.foreignPropertyNameInitCap}() {
        if (${foreignLoaderVariableName} == null)
        { ${foreignLoaderVariableName} = new ${foreignLoaderClassName}().ready(myBhv().pullout${fk.foreignPropertyNameInitCap}(_selectedList), _selector); }
        return ${foreignLoaderVariableName};
    }

#end
#end
#foreach ($referrer in $table.referrerAsOneList)
#if ($referrer.table.hasReferrerLoader())
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($referrerLoaderClassName = "${referrer.referrerTableExtendedReferrerLoaderClassName}")
#set ($referrerLoaderVariableName = "_foreign${referrer.referrerPropertyNameInitCapAsOne}Loader")
    protected ${referrerLoaderClassName} ${referrerLoaderVariableName};
    public ${referrerLoaderClassName} pullout${referrer.referrerPropertyNameInitCapAsOne}() {
        if (${referrerLoaderVariableName} == null)
        { ${referrerLoaderVariableName} = new ${referrerLoaderClassName}().ready(myBhv().pullout${referrer.referrerPropertyNameInitCapAsOne}(_selectedList), _selector); }
        return ${referrerLoaderVariableName};
    }

#end
#end
    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public List<${myExtendedObjectClassName}> getSelectedList() { return _selectedList; }
    public BehaviorSelector getSelector() { return _selector; }
}
