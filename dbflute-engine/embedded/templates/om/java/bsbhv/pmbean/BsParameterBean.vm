##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseParameterBean};
#set ($myClassName = "${myBaseParameterBeanClassName}")

import java.util.*;

#if ($database.isPmbMetaDataForProcedure($pmbClassName))
import org.dbflute.outsidesql.ProcedurePmb;
#else
#if ($database.hasPmbMetaDataPagingExtension($pmbClassName))
import org.dbflute.outsidesql.paging.SimplePagingBean;
#end
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
import org.dbflute.outsidesql.typed.*;
#else
import org.dbflute.twowaysql.pmbean.ParameterBean;
#end
#end
import org.dbflute.jdbc.*;
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName))
import org.dbflute.cbean.coption.LikeSearchOption;
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyFromTo($pmbClassName))
import org.dbflute.cbean.coption.FromToOption;
#end
import org.dbflute.outsidesql.PmbCustodial;
#if ($database.isShortCharHandlingValid() && $database.hasPmbMetaDataPropertyRefColumnChar($pmbClassName))
import org.dbflute.outsidesql.PmbCustodial.PmbShortCharHandlingMode;
#end
import org.dbflute.util.DfTypeUtil;
import ${glPackageBaseCommon}.*;
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
#if ($database.isApplicationBehaviorProject())
import ${database.libraryBehaviorPackage}.*;
#else
import ${glPackageExtendedBhv}.*;
#end
#end
#if ($database.isPmbMetaDataTypedReturnDomainEntityPmb($pmbClassName))
#if ($database.isApplicationBehaviorProject())
import ${database.libraryEntityPackage}.*;
#else
import ${glPackageExtendedEntity}.*;
#end
#end
#if ($database.isPmbMetaDataTypedReturnCustomizeEntityPmb($pmbClassName) || $database.isPmbMetaDataProcedureRefCustomizeEntity($pmbClassName))
import ${glPackageExtendedCustomizeEntity}.*;
#end

/**
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
 * The base class for typed parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br>
 * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataBehaviorQueryPath($pmbClassName)}</span>" on ${database.getPmbMetaDataBehaviorClassName($pmbClassName)}.
#else
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
 * The base class for procedure parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br>
 * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataProcedureName($pmbClassName)}</span>".
#else
 * The base class for parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}.
#end
#end
 * @author ${database.classAuthor}
 */
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
public${database.getPmbMetaDataAbstractDefinition($pmbClassName)} class ${myClassName} implements ProcedurePmb, FetchBean {
#else
public${database.getPmbMetaDataAbstractDefinition($pmbClassName)} class ${myClassName}${database.getPmbMetaDataSuperClassDefinition($pmbClassName)}${database.getPmbMetaDataInterfaceDefinition($pmbClassName)} {
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    // -----------------------------------------------------
    //                                   Procedure Parameter
    //                                   -------------------
#if ($database.hasPmbMetaDataProcedureOverload($pmbClassName))
    // this procedure has overload parameters so you need to extend this class
    // and set up parameter annotations for one call of overload
#end
#set ($procedureParameterIndex = 0)
#set ($procedureNotParamResultIndex = 1000)
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($annotationPropName = ${propertyName})
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($database.isPmbMetaDataPropertyOptionProcedureParameterIn($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_PROCEDURE_PARAMETER = "in, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterOut($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_PROCEDURE_PARAMETER = "out, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterInOut($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_PROCEDURE_PARAMETER = "inout, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterReturn($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_PROCEDURE_PARAMETER = "return, -1";
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterResult($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_PROCEDURE_PARAMETER = "notParamResult, ${procedureNotParamResultIndex}";
#set ($procedureNotParamResultIndex = $procedureNotParamResultIndex + 1)
#end
#if ($database.needsPmbMetaDataProcedureParameterStringClobHandling($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_VALUE_TYPE = "stringClobType";
#end
#if ($database.needsPmbMetaDataProcedureParameterFixedLengthStringHandling($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_VALUE_TYPE = "fixedLengthStringType";
#end
#if ($database.needsPmbMetaDataProcedureParameterObjectBindingBigDecimalHandling($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_VALUE_TYPE = "objectBindingBigDecimalType";
#end
#if ($database.needsPmbMetaDataProcedureParameterPostgreSQLByteaHandling($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_VALUE_TYPE = "postgreSqlByteaType";
#end
#if ($database.needsPmbMetaDataProcedureParameterPostgreSQLOidHandling($pmbClassName, $propertyName))
    public static final String ${annotationPropName}_VALUE_TYPE = "postgreSqlOidType";
#end
#if ($database.needsPmbMetaDataProcedureParameterOracleArrayHandling($pmbClassName, $propertyName))
    public static final ValueType ${annotationPropName}_VALUE_TYPE
            = new ${glDBFluteConfig}.ImplementedOracleArrayType
                  ("${database.getPmbMetaDataProcedureParameterOracleArrayTypeName($pmbClassName, $propertyName)}", ${database.getPmbMetaDataProcedureParameterOracleArrayElementJavaNativeTypeLiteral($pmbClassName, $propertyName)});
#end
#if ($database.needsPmbMetaDataProcedureParameterOracleStructHandling($pmbClassName, $propertyName))
    public static final ValueType ${annotationPropName}_VALUE_TYPE
            = new ${glDBFluteConfig}.ImplementedOracleStructType
                  ("${database.getPmbMetaDataProcedureParameterOracleStructTypeName($pmbClassName, $propertyName)}", ${database.getPmbMetaDataProcedureParameterOracleStructEntityTypeTypeLiteral($pmbClassName, $propertyName)});
#end
#end
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($variableName = "_$database.initUncap(${propertyName})")
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($database.isPmbMetaDataPropertyOptionClassificationFixedElement($pmbClassName, $propertyName))
    /** The parameter of ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)}. */
    protected ${propertyType} ${variableName} = ${database.getPmbMetaDataPropertyOptionClassificationFixedElementValueExp($pmbClassName, $propertyName)};

#else
    /** The parameter of ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)}. */
    protected ${propertyType} ${variableName};

#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))
    /** The option of like-search for ${propertyName}. */
    protected LikeSearchOption ${variableName}InternalLikeSearchOption;

#end
#end
#if (!$database.hasPmbMetaDataCheckSafetyResult($pmbClassName))
    /** The max size of safety result. */
    protected int _safetyMaxResultSize;

#end
    /** The time-zone for filtering e.g. from-to. (NullAllowed: if null, default zone) */
    protected TimeZone _timeZone;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
     * Constructor for the typed parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br>
     * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataBehaviorQueryPath($pmbClassName)}</span>" on ${database.getPmbMetaDataBehaviorClassName($pmbClassName)}.
#else
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
     * Constructor for the procedure parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br>
     * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataProcedureName($pmbClassName)}</span>".
#else
     * Constructor for the parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}.
#end
#end
     */
    public ${myClassName}() {
#if ($database.hasPmbMetaDataPagingExtension($pmbClassName))
        if (${glDBFluteConfig}.getInstance().isPagingCountLater()) {
            enablePagingCountLater();
        }
#end
    }

#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
    // ===================================================================================
    //                                                                Typed Implementation
    //                                                                ====================
    /**
     * {@inheritDoc}
     */
    public String getOutsideSqlPath() { return "${database.getPmbMetaDataBehaviorQueryPath($pmbClassName)}"; }

#if ($database.isPmbMetaDataTypedSelectPmb($pmbClassName))
    /**
     * Get the type of an entity for result. (implementation)
     * @return The type instance of an entity, ${database.getPmbMetaDataCustomizeEntityLineDisp($pmbClassName)}. (NotNull)
     */
    public Class<${database.getPmbMetaDataCustomizeEntityType($pmbClassName)}> getEntityType() { return ${database.getPmbMetaDataCustomizeEntityType($pmbClassName)}.class; }

#end
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
    // ===================================================================================
    //                                                            Procedure Implementation
    //                                                            ========================
    /**
     * {@inheritDoc}
     */
    public String getProcedureName() { return "${database.getPmbMetaDataProcedureName($pmbClassName)}"; }

    /**
     * {@inheritDoc}
     */
     public boolean isEscapeStatement() { return true; } // as default

    /**
     * {@inheritDoc}
     */
     public boolean isCalledBySelect() { return ${database.isPmbMetaDataProcedureCalledBySelect($pmbClassName)}; } // resolved by generator

#end
#if (!$database.hasPmbMetaDataCheckSafetyResult($pmbClassName))
    // ===================================================================================
    //                                                                       Safety Result
    //                                                                       =============
    /**
     * {@inheritDoc}
     */
    public void checkSafetyResult(int safetyMaxResultSize) {
        _safetyMaxResultSize = safetyMaxResultSize;
    }

    /**
     * {@inheritDoc}
     */
    public int getSafetyMaxResultSize() {
        return _safetyMaxResultSize;
    }

#end
#if ($database.existsPmbMetaDataAlternateBooleanMethodNameSet($pmbClassName))
    // ===================================================================================
    //                                                                   Alternate Boolean
    //                                                                   =================
#foreach ($alternateBooleanMethodName in $database.getPmbMetaDataAlternateBooleanMethodNameSet($pmbClassName))
    /**
     * This is an alternate boolean method waiting for your overriding.
     * @return The determination, true or false for your complex conditions.
     */
    public abstract boolean ${alternateBooleanMethodName}();

#end
#end
    // ===================================================================================
    //                                                                       Assist Helper
    //                                                                       =============
    // -----------------------------------------------------
    //                                                String
    //                                                ------
    protected String filterStringParameter(String value) { return isEmptyStringParameterAllowed() ? value : convertEmptyToNull(value); }
    protected boolean isEmptyStringParameterAllowed() { return ${glDBFluteConfig}.getInstance().isEmptyStringParameterAllowed(); }
    protected String convertEmptyToNull(String value) { return PmbCustodial.convertEmptyToNull(value); }

#if ($database.isShortCharHandlingValid() && $database.hasPmbMetaDataPropertyRefColumnChar($pmbClassName))
    protected String handleShortChar(String propertyName, String value, Integer size)
    { return PmbCustodial.handleShortChar(propertyName, value, size, chooseShortCharHandlingMode(propertyName, value, size)); }

    protected PmbShortCharHandlingMode chooseShortCharHandlingMode(String propertyName, String value, Integer size)
    { return PmbShortCharHandlingMode.${database.shortCharHandlingMode}; }

#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName))
    protected void assertLikeSearchOptionValid(String name, LikeSearchOption option) { PmbCustodial.assertLikeSearchOptionValid(name, option); }

#end
    // -----------------------------------------------------
    //                                                  Date
    //                                                  ----
    protected Date toUtilDate(Object date) { return PmbCustodial.toUtilDate(date, _timeZone); }
#if ($database.isAvailableJava8TimeLocalDateEntity())
    protected <DATE> DATE toLocalDate(Date date, Class<DATE> localType) { return PmbCustodial.toLocalDate(date, localType, chooseRealTimeZone()); }
    protected TimeZone chooseRealTimeZone() { return PmbCustodial.chooseRealTimeZone(_timeZone); }

    /**
     * Set time-zone, basically for LocalDate conversion. <br>
     * Normally you don't need to set this, you can adjust other ways. <br>
     * (DBFlute system's time-zone is used as default)
     * @param timeZone The time-zone for filtering. (NullAllowed: if null, default zone)
     */
    public void zone(TimeZone timeZone) { _timeZone = timeZone; }
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyFromTo($pmbClassName))

    protected void assertFromToOptionValid(String name, FromToOption option) { PmbCustodial.assertFromToOptionValid(name, option); }
    protected FromToOption createFromToOption() { return PmbCustodial.createFromToOption(_timeZone); }
#end

    // -----------------------------------------------------
    //                                    by Option Handling
    //                                    ------------------
    // might be called by option handling
    protected <NUMBER extends Number> NUMBER toNumber(Object obj, Class<NUMBER> type) { return PmbCustodial.toNumber(obj, type); }
    protected Boolean toBoolean(Object obj) { return PmbCustodial.toBoolean(obj); }
    @SuppressWarnings("unchecked")
    protected <ELEMENT> ArrayList<ELEMENT> newArrayList(ELEMENT... elements) { return PmbCustodial.newArrayList(elements); }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    /**
     * @return The display string of all parameters. (NotNull)
     */
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(DfTypeUtil.toClassTitle(this)).append(":");
        sb.append(xbuildColumnString());
        return sb.toString();
    }
    protected String xbuildColumnString() {
        final String dm = ", ";
        final StringBuilder sb = new StringBuilder();
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($variableName = "_$database.initUncap(${propertyName})")
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($propertyType.equals("Date") || $propertyType.equals("java.util.Date"))
        sb.append(dm).append(PmbCustodial.formatUtilDate(${variableName}, _timeZone, "${database.utilDateDisplayPattern}"));
#elseif ($propertyType.equals("byte[]"))
        sb.append(dm).append(PmbCustodial.formatByteArray(${variableName}));
#else
        sb.append(dm).append(${variableName});
#end
#end
        if (sb.length() > 0) { sb.delete(0, dm.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }

#set ($propertyLoopIndex = 0)
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#if ($propertyLoopIndex == 0)
    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#else

#end
#set ($variableName = "_$database.initUncap(${propertyName})")
#set ($argumentName = "$database.initUncap(${propertyName})")
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
    /**
     * [get] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @return The value of ${propertyName}. (NullAllowed, NotEmptyString(when String): if empty string, returns null)
     */
    public ${propertyType} get${database.initCap($propertyName)}() {
#if ($propertyType.endsWith("String"))
#if ($database.isShortCharHandlingValid() && $database.isPmbMetaDataPropertyRefColumnChar($pmbClassName, $propertyName))
        String filtered = filterStringParameter(${variableName});
        filtered = handleShortChar("${propertyName}", filtered, ${database.getPmbMetaDataPropertyRefSize($pmbClassName, $propertyName)});
        return filtered;
#else
        return filterStringParameter(${variableName});
#end
#else
#if ($propertyType.equals("Date") || $propertyType.equals("java.util.Date"))
        return toUtilDate(${variableName});
#else
        return ${variableName};
#end
#end
    }
#if (!$database.hasPmbMetaDataPropertyOptionOriginalOnlyOneSetter($pmbClassName, $propertyName))

    /**
     * [set] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    public void set${database.initCap($propertyName)}(${propertyType} ${argumentName}) {
        ${variableName} = ${argumentName};
    }
#end
#if ($database.isPmbMetaDataPropertyOptionLikeSearch($pmbClassName, $propertyName))

    /**
     * [set as likeSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     * @param ${argumentName}Option The option of likeSearch for ${propertyName} which is NOT split mode. (NotNull)
     */
    public void set${database.initCap($propertyName)}(${propertyType} ${argumentName}, LikeSearchOption ${argumentName}Option) {
        assertLikeSearchOptionValid("${argumentName}Option", ${argumentName}Option);
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = ${argumentName}Option;
    }
#end
#if ($database.isPmbMetaDataPropertyOptionPrefixSearch($pmbClassName, $propertyName))

    /**
     * [set as prefixSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    public void set${database.initCap($propertyName)}_PrefixSearch(${propertyType} ${argumentName}) {
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = new LikeSearchOption().likePrefix();
    }
#end
#if ($database.isPmbMetaDataPropertyOptionContainSearch($pmbClassName, $propertyName))

    /**
     * [set as containSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    public void set${database.initCap($propertyName)}_ContainSearch(${propertyType} ${argumentName}) {
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = new LikeSearchOption().likeContain();
    }
#end
#if ($database.isPmbMetaDataPropertyOptionSuffixSearch($pmbClassName, $propertyName))

    /**
     * [set as suffixSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    public void set${database.initCap($propertyName)}_SuffixSearch(${propertyType} ${argumentName}) {
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = new LikeSearchOption().likeSuffix();
    }
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))

    /**
     * Get the internal option of likeSearch for ${propertyName}. {Internal Method: Don't invoke this}
     * @return The internal option of likeSearch for ${propertyName}. (NullAllowed)
     */
    public LikeSearchOption get${database.initCap($propertyName)}InternalLikeSearchOption() {
        return ${variableName}InternalLikeSearchOption;
    }
#end
#if ($database.isPmbMetaDataPropertyOptionFromDate($pmbClassName, $propertyName))

    /**
     * [set as fromDate] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    public void set${database.initCap($propertyName)}_FromDate(${propertyType} ${argumentName}) {
#if ($database.isAvailableJava8TimeLocalDateEntity())
        ${variableName} = toLocalDate(createFromToOption().compareAsDate().filterFromDate(toUtilDate(${argumentName})), ${propertyType}.class);
#else
        ${variableName} = createFromToOption().compareAsDate().filterFromDate(${argumentName});
#end
    }
#end
#if ($database.isPmbMetaDataPropertyOptionFromDateOption($pmbClassName, $propertyName))

    /**
     * [set as fromScope] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     * @param ${argumentName}Option The option of from-to scope for ${propertyName}. (NotNull)
     */
    public void set${database.initCap($propertyName)}_FromDate(${propertyType} ${argumentName}, FromToOption ${argumentName}Option) {
        assertFromToOptionValid("${argumentName}Option", ${argumentName}Option);
#if ($database.isAvailableJava8TimeLocalDateEntity())
        ${variableName} = toLocalDate(${argumentName}Option.filterFromDate(toUtilDate(${argumentName})), ${propertyType}.class);
#else
        ${variableName} = ${argumentName}Option.filterFromDate(${argumentName});
#end
    }
#end
#if ($database.isPmbMetaDataPropertyOptionToDate($pmbClassName, $propertyName))

    /**
     * [set as toDate] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    public void set${database.initCap($propertyName)}_ToDate(${propertyType} ${argumentName}) {
#if ($database.isAvailableJava8TimeLocalDateEntity())
        ${variableName} = toLocalDate(createFromToOption().compareAsDate().filterToDate(toUtilDate(${argumentName})), ${propertyType}.class);
#else
        ${variableName} = createFromToOption().compareAsDate().filterToDate(${argumentName});
#end
    }
#end
#if ($database.isPmbMetaDataPropertyOptionToDateOption($pmbClassName, $propertyName))

    /**
     * [set as toScope] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     * @param ${argumentName}Option The option of from-to scope for ${propertyName}. (NotNull)
     */
    public void set${database.initCap($propertyName)}_ToDate(${propertyType} ${argumentName}, FromToOption ${argumentName}Option) {
        assertFromToOptionValid("${argumentName}Option", ${argumentName}Option);
#if ($database.isAvailableJava8TimeLocalDateEntity())
        ${variableName} = toLocalDate(${argumentName}Option.filterToDate(toUtilDate(${argumentName})), ${propertyType}.class);
#else
        ${variableName} = ${argumentName}Option.filterToDate(${argumentName});
#end
    }
#end
#if ($database.isPmbMetaDataPropertyOptionClassificationSetter($pmbClassName, $propertyName))
#set ($classificationTop = $database.getPmbMetaDataPropertyOptionClassificationTop($pmbClassName, $propertyName))

    /**
     * [set as ${classificationTop.classificationName}] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdef The instance of classification definition (as ENUM type). (NullAllowed: if null, null value is set to the property)
     */
    public void set${database.initCap($propertyName)}As${classificationTop.classificationName}(${glCDef}.${classificationTop.classificationName} cdef) {
#if ($database.isPmbMetaDataPropertyJavaNativeNumberObject($pmbClassName, $propertyName))
        ${variableName} = cdef != null ? toNumber(cdef.code(), ${propertyType}.class) : null;
#elseif ($database.isPmbMetaDataPropertyJavaNativeBooleanObject($pmbClassName, $propertyName))
        ${variableName} = cdef != null ? toBoolean(cdef.code()) : null;
#else
        ${variableName} = cdef != null ? cdef.code() : null;
#end
    }
#foreach ($classificationElement in $database.getPmbMetaDataPropertyOptionClassificationTop($pmbClassName, $propertyName).classificationElementList)

    /**
     * [set as ${classificationElement.name}] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br>
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)} <br>
#end
#if ($classificationElement.hasComment())
     * ${classificationElement.comment}
#end
     */
    public void set${database.initCap($propertyName)}_${classificationElement.name}() {
        ${variableName} = ${database.getPmbMetaDataPropertyOptionClassificationSettingElementValueExp($pmbClassName, $propertyName, $classificationElement.name)};
    }
#end
#end
#set ($propertyLoopIndex = $propertyLoopIndex + 1)
#end
}
