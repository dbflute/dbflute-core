##
## Copyright 2014-2020 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCB};
#set ($myClassName = "${myBaseConditionBeanClassName}")

import org.dbflute.cbean.AbstractConditionBean;
import org.dbflute.cbean.ConditionBean;
import org.dbflute.cbean.ConditionQuery;
import org.dbflute.cbean.chelper.*;
import org.dbflute.cbean.coption.*;
import org.dbflute.cbean.dream.*;
import org.dbflute.cbean.sqlclause.SqlClause;
import org.dbflute.cbean.sqlclause.SqlClauseCreator;
import org.dbflute.cbean.scoping.*;
import org.dbflute.dbmeta.DBMetaProvider;
import org.dbflute.twowaysql.factory.SqlAnalyzerFactory;
import org.dbflute.twowaysql.style.BoundDateDisplayTimeZoneProvider;
#if ($table.hasPrimaryKeyForcedClassificationSetting())
import ${glPackageBaseCommon}.${glCDef};
#end
import ${glPackageBaseCommon}.${glDBFluteConfig};
import ${glPackageBaseCommon}.${glDBMetaInstanceHandler};
import ${glPackageBaseCommon}.${glImplementedInvokerAssistant};
import ${glPackageBaseCommon}.${glImplementedSqlClauseCreator};
import ${glPackageCB}.*;
import ${glPackageCQ}.*;
#if ($table.hasJoinableRelationNestSelectSetupper())
import ${glPackageNss}.*;
#end

/**
 * The base condition-bean of ${table.tableDbName}.
 * @author ${database.classAuthor}
 */
public class ${myClassName} extends AbstractConditionBean {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${myConditionQueryClassName} _conditionQuery;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
        if (${glDBFluteConfig}.getInstance().isPagingCountLater()) {
            enablePagingCountLater();
        }
        if (${glDBFluteConfig}.getInstance().isPagingCountLeastJoin()) {
            enablePagingCountLeastJoin();
        }
        if (${glDBFluteConfig}.getInstance().isNonSpecifiedColumnAccessAllowed()) {
            enableNonSpecifiedColumnAccess();
        }
        if (${glDBFluteConfig}.getInstance().isSpecifyColumnRequired()) {
            enableSpecifyColumnRequired();
        }
        xsetSpecifyColumnRequiredExceptDeterminer(${glDBFluteConfig}.getInstance().getSpecifyColumnRequiredExceptDeterminer());
        if (${glDBFluteConfig}.getInstance().isSpecifyColumnRequiredWarningOnly()) {
            xenableSpecifyColumnRequiredWarningOnly();
        }
        if (${glDBFluteConfig}.getInstance().isQueryUpdateCountPreCheck()) {
            enableQueryUpdateCountPreCheck();
        }
    }

    // ===================================================================================
    //                                                                           SqlClause
    //                                                                           =========
    @Override
    protected SqlClause createSqlClause() {
        SqlClauseCreator creator = ${glDBFluteConfig}.getInstance().getSqlClauseCreator();
        if (creator != null) {
            return creator.createSqlClause(this);
        }
        return new ${glImplementedSqlClauseCreator}().createSqlClause(this); // as default
    }

    // ===================================================================================
    //                                                                             DB Meta
    //                                                                             =======
    @Override
    protected DBMetaProvider getDBMetaProvider() {
        return ${glDBMetaInstanceHandler}.getProvider(); // as default
    }

    public String asTableDbName() {
        return "${table.tableDbName}";
    }

    // ===================================================================================
    //                                                                 PrimaryKey Handling
    //                                                                 ===================
#if ($table.hasPrimaryKey())
    /**
     * Accept the query condition of primary key as equal.
     * ${table.primaryKeyArgsJavaDocString}
     * @return this. (NotNull)
     */
    public ${myConditionBeanClassName} acceptPK(${table.primaryKeyArgsString}) {
        ${table.primaryKeyArgsAssertString}
        ${myClassName} cb = this;
        ${table.primaryKeyArgsConditionSetupString}
        return (${myConditionBeanClassName})this;
    }

#if ($table.isCompatibleConditionBeanAcceptPKOldStyle())
    /**
     * Accept the query condition of primary key as equal. (old style)
     * ${table.primaryKeyArgsJavaDocString}
     */
    public void acceptPrimaryKey(${table.primaryKeyArgsString}) {
        ${table.primaryKeyArgsAssertString}
        ${myClassName} cb = this;
        ${table.primaryKeyArgsConditionSetupString}
    }

#end
#end
#foreach ($uq in $table.keyableUniqueList)
    /**
     * Accept the query condition of unique key as equal.
     * ${uq.argsJavaDocString}
     * @return this. (NotNull)
     */
    public ${myConditionBeanClassName} acceptUniqueOf${uq.javaNameKeyword}(${uq.argsString}) {
        ${uq.argsAssertString}
        ${myClassName} cb = this;
        ${uq.argsConditionSetupString}
        return (${myConditionBeanClassName})this;
    }

#end
    public ConditionBean addOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
        query().addOrderBy_${col.JavaName}_Asc();
#end
        return this;
#else
        String msg = "The table has no primary-keys: " + asTableDbName();
        throw new UnsupportedOperationException(msg);
#end
    }

    public ConditionBean addOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
        query().addOrderBy_${col.JavaName}_Desc();
#end
        return this;
#else
        String msg = "The table has no primary-keys: " + asTableDbName();
        throw new UnsupportedOperationException(msg);
#end
    }

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
    /**
     * Prepare for various queries. <br>
     * Examples of main functions are following:
     * <pre>
     * <span style="color: #3F7E5E">// Basic Queries</span>
     * cb.query().setMemberId_Equal(value);        <span style="color: #3F7E5E">// =</span>
     * cb.query().setMemberId_NotEqual(value);     <span style="color: #3F7E5E">// !=</span>
     * cb.query().setMemberId_GreaterThan(value);  <span style="color: #3F7E5E">// &gt;</span>
     * cb.query().setMemberId_LessThan(value);     <span style="color: #3F7E5E">// &lt;</span>
     * cb.query().setMemberId_GreaterEqual(value); <span style="color: #3F7E5E">// &gt;=</span>
     * cb.query().setMemberId_LessEqual(value);    <span style="color: #3F7E5E">// &lt;=</span>
     * cb.query().setMemberName_InScope(valueList);    <span style="color: #3F7E5E">// in ('a', 'b')</span>
     * cb.query().setMemberName_NotInScope(valueList); <span style="color: #3F7E5E">// not in ('a', 'b')</span>
     * <span style="color: #3F7E5E">// LikeSearch with various options: (versatile)</span>
     * <span style="color: #3F7E5E">// {like ... [options]}</span>
     * cb.query().setMemberName_LikeSearch(value, option);
     * cb.query().setMemberName_NotLikeSearch(value, option); <span style="color: #3F7E5E">// not like ...</span>
     * <span style="color: #3F7E5E">// FromTo with various options: (versatile)</span>
     * <span style="color: #3F7E5E">// {(default) fromDatetime &lt;= BIRTHDATE &lt;= toDatetime}</span>
     * cb.query().setBirthdate_FromTo(fromDatetime, toDatetime, option);
     * <span style="color: #3F7E5E">// DateFromTo: (Date means yyyy/MM/dd)</span>
     * <span style="color: #3F7E5E">// {fromDate &lt;= BIRTHDATE &lt; toDate + 1 day}</span>
     * cb.query().setBirthdate_IsNull();    <span style="color: #3F7E5E">// is null</span>
     * cb.query().setBirthdate_IsNotNull(); <span style="color: #3F7E5E">// is not null</span>
     *
     * <span style="color: #3F7E5E">// ExistsReferrer: (correlated sub-query)</span>
     * <span style="color: #3F7E5E">// {where exists (select PURCHASE_ID from PURCHASE where ...)}</span>
     * cb.query().existsPurchase(purchaseCB <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     purchaseCB.query().set... <span style="color: #3F7E5E">// referrer sub-query condition</span>
     * });
     * cb.query().notExistsPurchase...
     *
     * <span style="color: #3F7E5E">// (Query)DerivedReferrer: (correlated sub-query)</span>
     * cb.query().derivedPurchaseList().max(purchaseCB <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     purchaseCB.specify().columnPurchasePrice(); <span style="color: #3F7E5E">// derived column for function</span>
     *     purchaseCB.query().set... <span style="color: #3F7E5E">// referrer sub-query condition</span>
     * }).greaterEqual(value);
     *
     * <span style="color: #3F7E5E">// ScalarCondition: (self-table sub-query)</span>
     * cb.query().scalar_Equal().max(scalarCB <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     scalarCB.specify().columnBirthdate(); <span style="color: #3F7E5E">// derived column for function</span>
     *     scalarCB.query().set... <span style="color: #3F7E5E">// scalar sub-query condition</span>
     * });
     *
     * <span style="color: #3F7E5E">// OrderBy</span>
     * cb.query().addOrderBy_MemberName_Asc();
     * cb.query().addOrderBy_MemberName_Desc().withManualOrder(option);
     * cb.query().addOrderBy_MemberName_Desc().withNullsFirst();
     * cb.query().addOrderBy_MemberName_Desc().withNullsLast();
     * cb.query().addSpecifiedDerivedOrderBy_Desc(aliasName);
     *
     * <span style="color: #3F7E5E">// Query(Relation)</span>
     * cb.query().queryMemberStatus()...;
     * cb.query().queryMemberAddressAsValid(targetDate)...;
     * </pre>
     * @return The instance of condition-query for base-point table to set up query. (NotNull)
     */
    public ${myConditionQueryClassName} query() {
        assertQueryPurpose(); // assert only when user-public query
        return doGetConditionQuery();
    }

    public ${myConditionQueryClassName} xdfgetConditionQuery() { // public for parameter comment and internal
        return doGetConditionQuery();
    }

    protected ${myConditionQueryClassName} doGetConditionQuery() {
        if (_conditionQuery == null) {
            _conditionQuery = createLocalCQ();
        }
        return _conditionQuery;
    }

    protected ${myConditionQueryClassName} createLocalCQ() {
        return xcreateCQ(null, getSqlClause(), getSqlClause().getBasePointAliasName(), 0);
    }

    protected ${myConditionQueryClassName} xcreateCQ(ConditionQuery childQuery, SqlClause sqlClause, String aliasName, int nestLevel) {
        ${myConditionQueryClassName} cq = xnewCQ(childQuery, sqlClause, aliasName, nestLevel);
        cq.xsetBaseCB(this);
        return cq;
    }

    protected ${myConditionQueryClassName} xnewCQ(ConditionQuery childQuery, SqlClause sqlClause, String aliasName, int nestLevel) {
        return new ${myConditionQueryClassName}(childQuery, sqlClause, aliasName, nestLevel);
    }

    /**
     * {@inheritDoc}
     */
    public ConditionQuery localCQ() {
        return doGetConditionQuery();
    }

    // ===================================================================================
    //                                                                               Union
    //                                                                               =====
    /**
     * Set up 'union' for base-point table. <br>
     * You don't need to call SetupSelect in union-query,
     * because it inherits calls before. (Don't call SetupSelect after here)
     * <pre>
     * cb.query().<span style="color: #CC4747">union</span>(<span style="color: #553000">unionCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">unionCB</span>.query().set...
     * });
     * </pre>
     * @param unionCBLambda The callback for query of 'union'. (NotNull)
     */
    public void union(UnionQuery<${myConditionBeanClassName}> unionCBLambda) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); cb.xsetupForUnion(this); xsyncUQ(cb);
        try { lock(); unionCBLambda.query(cb); } finally { unlock(); } xsaveUCB(cb);
        final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionQuery(cq);
    }

    /**
     * Set up 'union all' for base-point table. <br>
     * You don't need to call SetupSelect in union-query,
     * because it inherits calls before. (Don't call SetupSelect after here)
     * <pre>
     * cb.query().<span style="color: #CC4747">unionAll</span>(<span style="color: #553000">unionCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">unionCB</span>.query().set...
     * });
     * </pre>
     * @param unionCBLambda The callback for query of 'union all'. (NotNull)
     */
    public void unionAll(UnionQuery<${myConditionBeanClassName}> unionCBLambda) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); cb.xsetupForUnion(this); xsyncUQ(cb);
        try { lock(); unionCBLambda.query(cb); } finally { unlock(); } xsaveUCB(cb);
        final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionAllQuery(cq);
    }
#if ($database.isAvailableDatabaseDependency())
#if ($database.isDatabasePostgreSQL())

    // ===================================================================================
    //                                                                           Lock Wait
    //                                                                           =========
    public ConditionBean lockForUpdateNoWait()
    { if (xhelpIsSqlClausePostgreSql()) { xhelpGettingSqlClausePostgreSql().lockForUpdateNoWait(); } return this; }

    protected boolean xhelpIsSqlClausePostgreSql() {
        return getSqlClause() instanceof org.dbflute.cbean.sqlclause.SqlClausePostgreSql;
    }

    protected org.dbflute.cbean.sqlclause.SqlClausePostgreSql xhelpGettingSqlClausePostgreSql() {
        return (org.dbflute.cbean.sqlclause.SqlClausePostgreSql)getSqlClause();
    }
#end
#if ($database.isDatabaseOracle())

    // ===================================================================================
    //                                                                           Lock Wait
    //                                                                           =========
    public ConditionBean lockForUpdateNoWait()
    { if (xhelpIsSqlClauseOracle()) { xhelpGettingSqlClauseOracle().lockForUpdateNoWait(); } return this; }
    public ConditionBean lockForUpdateWait(int waitSec)
    { if (xhelpIsSqlClauseOracle()) { xhelpGettingSqlClauseOracle().lockForUpdateWait(waitSec); } return this; }

    protected boolean xhelpIsSqlClauseOracle() {
        return getSqlClause() instanceof org.dbflute.cbean.sqlclause.SqlClauseOracle;
    }

    protected org.dbflute.cbean.sqlclause.SqlClauseOracle xhelpGettingSqlClauseOracle() {
        return (org.dbflute.cbean.sqlclause.SqlClauseOracle)getSqlClause();
    }
#end
#if ($database.isDatabaseDB2())

    // [DBFlute-0.7.9]
    // ===================================================================================
    //                                                                     Isolation Level
    //                                                                     ===============
    // *Database Dependency
    public void lockWithRR() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithRR(); } }
    public void lockWithRS() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithRS(); } }
    public void lockWithCS() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithCS(); } }
    public void lockWithUR() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithUR(); } }

    protected boolean xhelpIsSqlClauseDb2() {
        return getSqlClause() instanceof org.dbflute.cbean.sqlclause.SqlClauseDb2;
    }

    protected org.dbflute.cbean.sqlclause.SqlClauseDb2 xhelpGettingSqlClauseDb2() {
        return (org.dbflute.cbean.sqlclause.SqlClauseDb2)getSqlClause();
    }
#end
#end

    // ===================================================================================
    //                                                                         SetupSelect
    //                                                                         ===========
#foreach ($fk in $table.joinableForeignKeyList)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#set ($nestSelectSetuppperClassName = "${fk.foreignTableNestSelectSetupperClassName}")
#set ($dynamicFixedConditionArgs = "")
#set ($dynamicFixedConditionVariables = "")
#if ($fk.hasDynamicFixedCondition())
#set ($dynamicFixedConditionArgs = "${fk.dynamicFixedConditionFinalArgs}")
#set ($dynamicFixedConditionVariables = "${fk.dynamicFixedConditionVariables}")
#end
#set ($hasNestSelectSetupper = ${fk.hasForeignNestSelectSetupper()})
#if ($hasNestSelectSetupper)
    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${nestSelectSetuppperClassName} xdfgetNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
        return _nss${tmpPropertyNameInitCap};
    }
#end
    /**
     * Set up relation columns to select clause. <br>
     * ${fk.foreignDispForJavaDoc}
     * <pre>
     * <span style="color: #0000C0">${myEntityVariableName}Bhv</span>.selectEntity(<span style="color: #553000">cb</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">cb</span>.<span style="color: #CC4747">setupSelect_${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables})</span>; <span style="color: #3F7E5E">// ...().with[nested-relation]()</span>
     *     <span style="color: #553000">cb</span>.query().set...
     * }).alwaysPresent(<span style="color: #553000">${myEntityVariableName}</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ... = <span style="color: #553000">${myEntityVariableName}</span>.<span style="color: #CC4747">get${tmpPropertyNameInitCap}()</span>; <span style="color: #3F7E5E">// you can get by using SetupSelect</span>
     * });
     * </pre>
#if ($fk.hasDynamicFixedCondition())
     * ${fk.dynamicFixedConditionArgsJavaDocString}
#end
#set ($setupSelectReturnType = "void")
#if ($hasNestSelectSetupper)
     * @return The set-upper of nested relation. {setupSelect...().with[nested-relation]} (NotNull)
#set ($setupSelectReturnType = "${nestSelectSetuppperClassName}")
#end
#if ($fk.isDeprecatedRelation())
     * @deprecated ${fk.deprecated}
#end
     */
#if ($fk.isDeprecatedRelation())
    @SuppressWarnings("deprecation")
#end
    public ${setupSelectReturnType} setupSelect_${tmpPropertyNameInitCap}(${dynamicFixedConditionArgs}) {
        assertSetupSelectPurpose("${tmpPropertyName}");
#if ($fk.hasLocalColumnExceptPrimaryKey())
        if (hasSpecifiedLocalColumn()) {
#foreach ($col in $fk.localColumnList)
#if (!$col.isPrimaryKey())
            specify().column${col.javaName}();
#end
#end
        }
#end
        doSetupSelect(() -> query().query${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables}));
#if ($hasNestSelectSetupper)
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery())
        { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables})); }
        return _nss${tmpPropertyNameInitCap};
#end
    }

#end
#foreach ($referrer in $table.joinableReferrerAsOneList)
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($nestSelectSetuppperClassName = "${referrer.referrerTableNestSelectSetupperClassName}")
#set ($hasNestSelectSetupper = ${referrer.hasReferrerNestSelectSetupper()})
#if ($hasNestSelectSetupper)
    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${nestSelectSetuppperClassName} xdfgetNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
        return _nss${tmpPropertyNameInitCap};
    }
#end
    /**
     * Set up relation columns to select clause. <br>
     * ${referrer.referrerDispAsOneForJavaDoc}
     * <pre>
     * <span style="color: #0000C0">${myEntityVariableName}Bhv</span>.selectEntity(<span style="color: #553000">cb</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">cb</span>.<span style="color: #CC4747">setupSelect_${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables})</span>; <span style="color: #3F7E5E">// ...().with[nested-relation]()</span>
     *     <span style="color: #553000">cb</span>.query().set...
     * }).alwaysPresent(<span style="color: #553000">${myEntityVariableName}</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ... = <span style="color: #553000">${myEntityVariableName}</span>.<span style="color: #CC4747">get${tmpPropertyNameInitCap}()</span>; <span style="color: #3F7E5E">// you can get by using SetupSelect</span>
     * });
     * </pre>
#set ($setupSelectReturnType = "void")
#if ($hasNestSelectSetupper)
     * @return The set-upper of nested relation. {setupSelect...().with[nested-relation]} (NotNull)
#set ($setupSelectReturnType = "${nestSelectSetuppperClassName}")
#end
#if ($referrer.isDeprecatedRelation())
     * @deprecated ${referrer.deprecated}
#end
     */
#if ($referrer.isDeprecatedRelation())
    @SuppressWarnings("deprecation")
#end
    public ${setupSelectReturnType} setupSelect_${tmpPropertyNameInitCap}() {
        assertSetupSelectPurpose("${tmpPropertyName}");
        doSetupSelect(() -> query().query${tmpPropertyNameInitCap}());
#if ($hasNestSelectSetupper)
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery())
        { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}()); }
        return _nss${tmpPropertyNameInitCap};
#end
    }

#end
    // [DBFlute-0.7.4]
    // ===================================================================================
    //                                                                             Specify
    //                                                                             =======
    protected HpSpecification _specification;

    /**
     * Prepare for SpecifyColumn, (Specify)DerivedReferrer. <br>
     * This method should be called after SetupSelect.
     * <pre>
     * <span style="color: #0000C0">memberBhv</span>.selectEntity(<span style="color: #553000">cb</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">cb</span>.setupSelect_MemberStatus(); <span style="color: #3F7E5E">// should be called before specify()</span>
     *     <span style="color: #553000">cb</span>.specify().columnMemberName();
     *     <span style="color: #553000">cb</span>.specify().specifyMemberStatus().columnMemberStatusName();
     *     <span style="color: #553000">cb</span>.specify().derivedPurchaseList().max(<span style="color: #553000">purchaseCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *         <span style="color: #553000">purchaseCB</span>.specify().columnPurchaseDatetime();
     *         <span style="color: #553000">purchaseCB</span>.query().set...
     *     }, aliasName);
     * }).alwaysPresent(<span style="color: #553000">member</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ...
     * });
     * </pre>
     * @return The instance of specification. (NotNull)
     */
    public HpSpecification specify() {
        assertSpecifyPurpose();
        if (_specification == null) { _specification = new HpSpecification(this
            , xcreateSpQyCall(() -> true, () -> xdfgetConditionQuery())
            , _purpose, getDBMetaProvider(), xcSDRFnFc()); }
        return _specification;
    }

    public HpColumnSpHandler localSp() {
        return specify();
    }

    public boolean hasSpecifiedLocalColumn() {
        return _specification != null && _specification.hasSpecifiedColumn();
    }

    public static class HpSpecification extends HpAbstractSpecification<${myConditionQueryClassName}> {
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
        protected ${tmpCBClassName}.HpSpecification _${tmpPropertyName};
#end
#foreach ($referrer in $table.referrerAsOneList)
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
        protected ${tmpCBClassName}.HpSpecification _${tmpPropertyName};
#end
        public HpSpecification(ConditionBean baseCB, HpSpQyCall<${myConditionQueryClassName}> qyCall
                             , HpCBPurpose purpose, DBMetaProvider dbmetaProvider
                             , HpSDRFunctionFactory sdrFuncFactory)
        { super(baseCB, qyCall, purpose, dbmetaProvider, sdrFuncFactory); }
#foreach ($col in $table.columns)
        /**
         * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
         * @return The information object of specified column. (NotNull)
         */
        public SpecifiedColumn column${col.javaName}() { return doColumn("${col.name}"); }
#end
#if ($table.isDeprecatedSpecifyBatchColumn())
        /**
         * @deprecated ${table.deprecatedSpecifyBatchColumnComment}
         */
#end
        public void everyColumn() { doEveryColumn(); }
#if ($table.isDeprecatedSpecifyBatchColumn())
        /**
         * @deprecated ${table.deprecatedSpecifyBatchColumnComment}
         */
#end
        public void exceptRecordMetaColumn() { doExceptRecordMetaColumn(); }
        @Override
        protected void doSpecifyRequiredColumn() {
#foreach ($col in $table.primaryKey)
            column${col.javaName}(); // PK
#end
#foreach ($referrer in $table.referrerBothNonPKList)
            if (qyCall().qy().xgetReferrerQuery() instanceof ${referrer.referrerTableExtendedConditionQueryClassName}) {
#foreach ($col in $referrer.foreignColumnList)
                column${col.javaName}(); // non PK but referred column (and referrer also non PK)
#end
            }
#end
#foreach ($fk in $table.joinableForeignKeyList)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#if ($fk.hasLocalColumnExceptPrimaryKey())
            if (qyCall().qy().hasConditionQuery${tmpPropertyNameInitCap}()
                    || qyCall().qy().xgetReferrerQuery() instanceof ${fk.foreignTableExtendedConditionQueryClassName}) {
#foreach ($col in $fk.localColumnList)
#if (!$col.isPrimaryKey())
                column${col.javaName}(); // FK or one-to-one referrer
#end
#end
            }
#end
#end
        }
        @Override
        protected String getTableDbName() { return "$table.tableDbName"; }
#foreach ($fk in $table.joinableForeignKeyList)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#set ($tmpCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
#set ($tmpCQClassName = "${fk.foreignTableExtendedConditionQueryClassName}")
#if ($fk.hasDynamicFixedCondition())
        /**
         * Prepare to specify functions about relation table. <br>
         * ${fk.foreignDispForJavaDocNest}
         * ${fk.dynamicFixedConditionArgsJavaDocStringNest}
         * @return The instance for specification for relation table to specify. (NotNull)
#if ($fk.isDeprecatedRelation())
         * @deprecated ${fk.deprecated}
#end
         */
#if ($fk.isDeprecatedRelation())
    @SuppressWarnings("deprecation")
#end
        public ${tmpCBClassName}.HpSpecification specify${tmpPropertyNameInitCap}(${fk.dynamicFixedConditionFinalArgs}) {
            assertRelation("${tmpPropertyName}");
            if (_${tmpPropertyName} == null) {
                _${tmpPropertyName} = new ${tmpCBClassName}.HpSpecification(_baseCB
                    , xcreateSpQyCall(() -> _qyCall.has() && _qyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}()
                                    , () -> _qyCall.qy().query${tmpPropertyNameInitCap}(${fk.dynamicFixedConditionVariables}))
                    , _purpose, _dbmetaProvider, xgetSDRFnFc());
                if (xhasSyncQyCall()) { // inherits it
                    _${tmpPropertyName}.xsetSyncQyCall(xcreateSpQyCall(
                        () -> xsyncQyCall().has() && xsyncQyCall().qy().hasConditionQuery${tmpPropertyNameInitCap}()
                      , () -> xsyncQyCall().qy().query${tmpPropertyNameInitCap}(${fk.dynamicFixedConditionVariables})));
                }
            }
            return _${tmpPropertyName};
        }
#end
        /**
         * Prepare to specify functions about relation table. <br>
         * ${fk.foreignDispForJavaDocNest}
         * @return The instance for specification for relation table to specify. (NotNull)
#if ($referrer.isDeprecatedRelation())
         * @deprecated ${referrer.deprecated}
#end
         */
#if ($referrer.isDeprecatedRelation())
    @SuppressWarnings("deprecation")
#end
        public ${tmpCBClassName}.HpSpecification specify${tmpPropertyNameInitCap}() {
            assertRelation("${tmpPropertyName}");
            if (_${tmpPropertyName} == null) {
                _${tmpPropertyName} = new ${tmpCBClassName}.HpSpecification(_baseCB
                    , xcreateSpQyCall(() -> _qyCall.has() && _qyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}()
#if ($fk.hasDynamicFixedCondition())
                                    , () -> _qyCall.qy().xdfgetConditionQuery${tmpPropertyNameInitCap}())
#else
                                    , () -> _qyCall.qy().query${tmpPropertyNameInitCap}())
#end
                    , _purpose, _dbmetaProvider, xgetSDRFnFc());
                if (xhasSyncQyCall()) { // inherits it
                    _${tmpPropertyName}.xsetSyncQyCall(xcreateSpQyCall(
                        () -> xsyncQyCall().has() && xsyncQyCall().qy().hasConditionQuery${tmpPropertyNameInitCap}()
#if ($fk.hasDynamicFixedCondition())
                      , () -> xsyncQyCall().qy().xdfgetConditionQuery${tmpPropertyNameInitCap}()));
#else
                      , () -> xsyncQyCall().qy().query${tmpPropertyNameInitCap}()));
#end
                }
            }
            return _${tmpPropertyName};
        }
#end
#foreach ($referrer in $table.joinableReferrerAsOneList)
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($tmpCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
        /**
         * Prepare to specify functions about relation table. <br>
         * ${referrer.referrerDispAsOneForJavaDocNest}
         * @return The instance for specification for relation table to specify. (NotNull)
         */
        public ${tmpCBClassName}.HpSpecification specify${tmpPropertyNameInitCap}() {
            assertRelation("${tmpPropertyName}");
            if (_${tmpPropertyName} == null) {
                _${tmpPropertyName} = new ${tmpCBClassName}.HpSpecification(_baseCB
                    , xcreateSpQyCall(() -> _qyCall.has() && _qyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}()
                                    , () -> _qyCall.qy().query${tmpPropertyNameInitCap}())
                    , _purpose, _dbmetaProvider, xgetSDRFnFc());
                if (xhasSyncQyCall()) { // inherits it
                    _${tmpPropertyName}.xsetSyncQyCall(xcreateSpQyCall(
                        () -> xsyncQyCall().has() && xsyncQyCall().qy().hasConditionQuery${tmpPropertyNameInitCap}()
                      , () -> xsyncQyCall().qy().query${tmpPropertyNameInitCap}()));
                }
            }
            return _${tmpPropertyName};
        }
#end
#foreach ($referrer in $table.derivedReferrerReferrers)
#set ($tmpPropertyName = "${referrer.referrerPropertyName}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($tmpMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($tmpEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($tmpLocalCQClassName = "${referrer.foreignTableExtendedConditionQueryClassName}")
        /**
         * Prepare for (Specify)DerivedReferrer (correlated sub-query). <br>
         * {select max(FOO) from ${referrer.table.tableDbName} where ...) as FOO_MAX} <br>
         * ${referrer.referrerDispForJavaDocNest}
         * <pre>
         * cb.specify().<span style="color: #CC4747">derived${relationMethodIdentityName}()</span>.<span style="color: #CC4747">max</span>(${referrer.referrerLambdaExampleCBName} <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
         *     ${referrer.referrerLambdaExampleCBName}.specify().<span style="color: #CC4747">column...</span> <span style="color: #3F7E5E">// derived column by function</span>
         *     ${referrer.referrerLambdaExampleCBName}.query().set... <span style="color: #3F7E5E">// referrer condition</span>
         * }, ${tmpEntityClassName}.<span style="color: #CC4747">ALIAS_foo...</span>);
         * </pre>
         * @return The object to set up a function for referrer table. (NotNull)
         */
        public ${table.specifyDerivedReferrerFunctionClassName}<${tmpCBClassName}, ${tmpLocalCQClassName}> derived${tmpMethodIdentityName}() {
            assertDerived("${tmpPropertyName}"); if (xhasSyncQyCall()) { xsyncQyCall().qy(); } // for sync (for example, this in ColumnQuery)
## IntelliJ IDEA 13 cannot resolve generic type of the variable 'sq' so avoid it for now
            return cHSDRF(_baseCB, _qyCall.qy(), (String fn, SubQuery<${tmpCBClassName}> sq, ${tmpLocalCQClassName} cq, String al, DerivedReferrerOption op)
                    -> cq.xsderive${referrer.referrerPropertyNameInitCap}(fn, sq, al, op), _dbmetaProvider);
        }
#end
#if ($table.hasSinglePrimaryKey())
#if ($table.isAvailableMyselfMyselfDerived())
        /**
         * Prepare for (Specify)MyselfDerived (SubQuery).
         * @return The object to set up a function for myself table. (NotNull)
         */
        public ${table.specifyDerivedReferrerFunctionClassName}<${myConditionBeanClassName}, ${myConditionQueryClassName}> myselfDerived() {
            assertDerived("myselfDerived"); if (xhasSyncQyCall()) { xsyncQyCall().qy(); } // for sync (for example, this in ColumnQuery)
            return cHSDRF(_baseCB, _qyCall.qy(), (String fn, SubQuery<${myConditionBeanClassName}> sq, ${myConditionQueryClassName} cq, String al, DerivedReferrerOption op)
                    -> cq.xsmyselfDerive(fn, sq, al, op), _dbmetaProvider);
        }
#end
#end
    }
#if ($table.needsSpecifyDerivedReferrerFunctionDBMSOverride())

    @Override
    protected <LOCAL_CQ extends ConditionQuery, REFERRER_CB extends ConditionBean> HpSDRFunction<REFERRER_CB, LOCAL_CQ> newSDFFunction(
            ConditionBean baseCB, LOCAL_CQ localCQ
            , HpSDRSetupper<REFERRER_CB, LOCAL_CQ> querySetupper
            , DBMetaProvider dbmetaProvider, DerivedReferrerOptionFactory optionFactory) {
        return new ${table.specifyDerivedReferrerFunctionClassName}<REFERRER_CB, LOCAL_CQ>(baseCB, localCQ, querySetupper, dbmetaProvider, optionFactory);
    }
#end

    // ===================================================================================
    //                                                                        Dream Cruise
    //                                                                        ============
    /**
     * Welcome to the Dream Cruise for condition-bean deep world. <br>
     * This is very specialty so you can get the frontier spirit. Bon voyage!
     * @return The condition-bean for dream cruise, which is linked to main condition-bean.
     */
    public ${myConditionBeanClassName} dreamCruiseCB() {
        ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
        cb.xsetupForDreamCruise((${myConditionBeanClassName}) this);
        return cb;
    }

    protected ConditionBean xdoCreateDreamCruiseCB() {
        return dreamCruiseCB();
    }

    // [DBFlute-0.9.5.3]
    // ===================================================================================
    //                                                                        Column Query
    //                                                                        ============
#set ($isColQyMySqlExtension = ($database.isAvailableDatabaseDependency() && $database.isDatabaseMySQL()))
#set ($colQyOperandClass = "")
#set ($colQyOperandCreator = "")
#if ($isColQyMySqlExtension)
#set ($colQyOperandClass = "HpColQyOperand.HpExtendedColQyOperandMySql")
#set ($colQyOperandCreator = "xcreateColQyOperandMySql")
#else
#set ($colQyOperandClass = "HpColQyOperand")
#set ($colQyOperandCreator = "xcreateColQyOperand")
#end
    /**
     * Set up column-query. {column1 = column2}
     * <pre>
     * <span style="color: #3F7E5E">// where FOO &lt; BAR</span>
     * cb.<span style="color: #CC4747">columnQuery</span>(<span style="color: #553000">colCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">colCB</span>.specify().<span style="color: #CC4747">columnFoo()</span>; <span style="color: #3F7E5E">// left column</span>
     * }).lessThan(<span style="color: #553000">colCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">colCB</span>.specify().<span style="color: #CC4747">columnBar()</span>; <span style="color: #3F7E5E">// right column</span>
     * }); <span style="color: #3F7E5E">// you can calculate for right column like '}).plus(3);'</span>
     * </pre>
     * @param colCBLambda The callback for specify-query of left column. (NotNull)
     * @return The object for setting up operand and right column. (NotNull)
     */
    public ${colQyOperandClass}<${myConditionBeanClassName}> columnQuery(final SpecifyQuery<${myConditionBeanClassName}> colCBLambda) {
        return ${colQyOperandCreator}((rightSp, operand) -> {
            return xcolqy(xcreateColumnQueryCB(), xcreateColumnQueryCB(), colCBLambda, rightSp, operand);
        });
    }

    protected ${myConditionBeanClassName} xcreateColumnQueryCB() {
        ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
        cb.xsetupForColumnQuery((${myConditionBeanClassName})this);
        return cb;
    }

    // [DBFlute-0.9.6.3]
    // ===================================================================================
    //                                                                       OrScope Query
    //                                                                       =============
    /**
     * Set up the query for or-scope. <br>
     * (Same-column-and-same-condition-key conditions are allowed in or-scope)
     * <pre>
     * <span style="color: #3F7E5E">// where (FOO = '...' or BAR = '...')</span>
     * cb.<span style="color: #CC4747">orScopeQuery</span>(<span style="color: #553000">orCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">orCB</span>.query().setFoo...
     *     <span style="color: #553000">orCB</span>.query().setBar...
     * });
     * </pre>
     * @param orCBLambda The callback for query of or-condition. (NotNull)
     */
    public void orScopeQuery(OrQuery<${myConditionBeanClassName}> orCBLambda) {
        xorSQ((${myConditionBeanClassName})this, orCBLambda);
    }
#if ($table.isCompatibleOrScopeQueryPurposeNoCheck())

    @Override
    protected HpCBPurpose xhandleOrSQPurposeChange() {
        return null; // means no check
    }
#end

    /**
     * Set up the and-part of or-scope. <br>
     * (However nested or-scope query and as-or-split of like-search in and-part are unsupported)
     * <pre>
     * <span style="color: #3F7E5E">// where (FOO = '...' or (BAR = '...' and QUX = '...'))</span>
     * cb.<span style="color: #994747">orScopeQuery</span>(<span style="color: #553000">orCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">orCB</span>.query().setFoo...
     *     <span style="color: #553000">orCB</span>.<span style="color: #CC4747">orScopeQueryAndPart</span>(<span style="color: #553000">andCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *         <span style="color: #553000">andCB</span>.query().setBar...
     *         <span style="color: #553000">andCB</span>.query().setQux...
     *     });
     * });
     * </pre>
     * @param andCBLambda The callback for query of and-condition. (NotNull)
     */
    public void orScopeQueryAndPart(AndQuery<${myConditionBeanClassName}> andCBLambda) {
        xorSQAP((${myConditionBeanClassName})this, andCBLambda);
    }
#if ($table.isCursorSelectOptionAllowed())

    // ===================================================================================
    //                                                                       Cursor Select
    //                                                                       =============
    public void customizeCursorSelect(SVOptionCall<CursorSelectOption> opLambda) {
        doAcceptCursorSelectOption(opLambda);
    }
#end
#if ($table.isCompatibleConditionBeanOldNamingCheckInvalid())

    /**
     * Check invalid query when query is set. <br>
     * (it throws an exception if set query is invalid) <br>
     * You should call this before registrations of where clause and other queries. <br>
     * Union and SubQuery and other sub condition-bean inherit this. <br>
     *
     * <p>renamed to checkNullOrEmptyQuery() since 1.1,
     * but not deprecated because it might have many use.</p>
     *
     * #java8 compatible option
     */
    public void checkInvalidQuery() {
        checkNullOrEmptyQuery();
    }
#end
#if ($table.isCompatibleConditionBeanOldNamingOption())

    /**
     * Accept (no check) an invalid query when a query is set. <br>
     * (no condition if a set query is invalid) <br>
     * You should call this before registrations of where clause and other queries. <br>
     * Union and SubQuery and other sub condition-bean inherit this.
     * @deprecated use ignoreNullOrEmptyQuery()
     */
    public void acceptInvalidQuery() {
        getSqlClause().ignoreNullOrEmptyQuery();
    }

    /**
     * Allow to auto-detect joins that can be inner-join. <br>
     * <pre>
     * o You should call this before registrations of where clause.
     * o Union and SubQuery and other sub condition-bean inherit this.
     * o You should confirm your SQL on the log to be tuned by inner-join correctly.
     * </pre>
     * @deprecated use enableInnerJoinAutoDetect()
     */
    public void allowInnerJoinAutoDetect() {
        enableInnerJoinAutoDetect();
    }

    /**
     * Suppress auto-detecting inner-join. <br>
     * You should call this before registrations of where clause.
     * @deprecated use disableInnerJoinAutoDetect()
     */
    public void suppressInnerJoinAutoDetect() {
        disableInnerJoinAutoDetect();
    }

    /**
     * Allow an empty string for query. <br>
     * (you can use an empty string as condition) <br>
     * You should call this before registrations of where clause and other queries. <br>
     * Union and SubQuery and other sub condition-bean inherit this.
     * @deprecated use enableEmptyStringQuery()
     */
    public void allowEmptyStringQuery() {
        doEnableEmptyStringQuery();
    }

    /**
     * Enable checking record count before QueryUpdate (contains QueryDelete). (default is disabled) <br>
     * No query update if zero count. (basically for MySQL's deadlock by next-key lock)
     * @deprecated use enableQueryUpdateCountPreCheck()
     */
    public void enableCheckCountBeforeQueryUpdate() {
        enableQueryUpdateCountPreCheck();
    }

    /**
     * Disable checking record count before QueryUpdate (contains QueryDelete). (back to default) <br>
     * Executes query update even if zero count. (normal specification)
     * @deprecated use disableQueryUpdateCountPreCheck()
     */
    public void disableCheckCountBeforeQueryUpdate() {
        disableQueryUpdateCountPreCheck();
    }

    /**
     * Allow "that's bad timing" check.
     * @deprecated use enableThatsBadTiming()
     */
    public void allowThatsBadTiming() {
        enableThatsBadTiming();
    }

    /**
     * Suppress "that's bad timing" check.
     * @deprecated use disableThatsBadTiming()
     */
    public void suppressThatsBadTiming() {
        disableThatsBadTiming();
    }
#end

    // ===================================================================================
    //                                                                          DisplaySQL
    //                                                                          ==========
    @Override
    protected SqlAnalyzerFactory getSqlAnalyzerFactory()
    { return new ${glImplementedInvokerAssistant}().assistSqlAnalyzerFactory(); }
    @Override
    protected String getConfiguredLogDatePattern() { return ${glDBFluteConfig}.getInstance().getLogDatePattern(); }
    @Override
    protected String getConfiguredLogTimestampPattern() { return ${glDBFluteConfig}.getInstance().getLogTimestampPattern(); }
    @Override
    protected String getConfiguredLogTimePattern() { return ${glDBFluteConfig}.getInstance().getLogTimePattern(); }
    @Override
    protected BoundDateDisplayTimeZoneProvider getConfiguredLogTimeZoneProvider() { return ${glDBFluteConfig}.getInstance().getLogTimeZoneProvider(); }

    // ===================================================================================
    //                                                                       Meta Handling
    //                                                                       =============
    public boolean hasUnionQueryOrUnionAllQuery() {
        return query().hasUnionQueryOrUnionAllQuery();
    }

    // ===================================================================================
    //                                                                        Purpose Type
    //                                                                        ============
    @Override
    protected void xprepareSyncQyCall(ConditionBean mainCB) {
        final ${myConditionBeanClassName} cb;
        if (mainCB != null) {
            cb = (${myConditionBeanClassName})mainCB;
        } else {
            cb = new ${myConditionBeanClassName}();
        }
        specify().xsetSyncQyCall(xcreateSpQyCall(() -> true, () -> cb.query()));
    }

    // ===================================================================================
    //                                                                            Internal
    //                                                                            ========
    // very internal (for suppressing warn about 'Not Use Import')
    protected String xgetConditionBeanClassNameInternally() { return ${myConditionBeanClassName}.class.getName(); }
    protected String xgetConditionQueryClassNameInternally() { return ${myConditionQueryClassName}.class.getName(); }
    protected String xgetSubQueryClassNameInternally() { return SubQuery.class.getName(); }
    protected String xgetConditionOptionClassNameInternally() { return ConditionOption.class.getName(); }
}
