##
## Copyright 2014-2020 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCQ};

#set ($myClassName = "${myAbstractBaseConditionQueryClassName}")
import java.util.*;

import org.dbflute.cbean.*;
import org.dbflute.cbean.chelper.*;
import org.dbflute.cbean.ckey.*;
import org.dbflute.cbean.coption.*;
import org.dbflute.cbean.cvalue.ConditionValue;
import org.dbflute.cbean.ordering.*;
import org.dbflute.cbean.scoping.*;
import org.dbflute.cbean.sqlclause.SqlClause;
import org.dbflute.dbmeta.DBMetaProvider;
import ${glPackageBaseCommon}.*;
import ${glPackageCB}.*;
import ${glPackageCQ}.*;

/**
 * The abstract condition-query of ${table.tableDbName}.
 * @author ${database.classAuthor}
 */
public abstract class ${myClassName} extends AbstractConditionQuery {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}(ConditionQuery referrerQuery, SqlClause sqlClause, String aliasName, int nestLevel) {
        super(referrerQuery, sqlClause, aliasName, nestLevel);
    }

    // ===================================================================================
    //                                                                             DB Meta
    //                                                                             =======
    @Override
    protected DBMetaProvider xgetDBMetaProvider() {
        return ${glDBMetaInstanceHandler}.getProvider();
    }

    public String asTableDbName() {
        return "${table.tableDbName}";
    }

#set ($columnLoopIndex = 0)
#foreach ($col in $table.columns)
#if ($columnLoopIndex == 0)
    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
#else

#end
#set ($tmpJavaName = "${col.javaName}")
#set ($tmpUncapitalisedJavaName = "${col.uncapitalisedJavaName}")
#set ($fk = $col.foreignKey)
#if (${col.isJavaNativeStringObject()})
    /**
     * Equal(=). And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as equal. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    ${col.propertySettingModifier} void set${tmpJavaName}_Equal(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        doSet${tmpJavaName}_Equal(fRES(${tmpUncapitalisedJavaName}));
    }
#if (${col.isAvailableStringEmptyString()})

    /**
     * Equal(=). As the empty-string. And OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     */
    ${col.propertySettingModifier} void set${tmpJavaName}_Equal_EmptyString() {
        doSet${tmpJavaName}_Equal("");
    }
#end
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * Equal(=). As ${col.classificationName}. And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdef The instance of classification definition (as ENUM type). (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_Equal_As${col.classificationName}(${glCDef}.${col.classificationName} cdef) {
        doSet${tmpJavaName}_Equal(cdef != null ? cdef.code() : null);
    }
#if ($classificationTop.isSisterBooleanHandling())

    /**
     * Equal(=). As boolean for ${col.classificationName}. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param determination The determination, true or false. (basically NotNull: error as default, or no condition as option)
     */
    public void set${col.javaName}_Equal_AsBoolean(Boolean determination) {
        set${tmpJavaName}_Equal_As${col.classificationName}(${glCDef}.${col.classificationName}.codeOf(determination));
    }
#end
#foreach ($classificationElement in $col.classificationTop.classificationElementList)

    /**
     * Equal(=). As ${classificationElement.name} (${classificationElement.code}). And OnlyOnceRegistered. <br>
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
#if ($classificationElement.isDeprecated())
    @Deprecated
#end
    public void set${tmpJavaName}_Equal_${classificationElement.name}() {
        set${tmpJavaName}_Equal_As${col.classificationName}(${glCDef}.${col.classificationName}.${classificationElement.name});
    }
#end
#end

    protected void doSet${tmpJavaName}_Equal(${col.javaNative} ${tmpUncapitalisedJavaName}) {
#if ($database.isShortCharHandlingValid() && $col.isJdbcTypeChar())
        reg${tmpJavaName}(CK_EQ, hSC("${col.name}", ${tmpUncapitalisedJavaName}, ${col.columnSizeSettingExpression}, "${database.shortCharHandlingModeCode}"));
#else
        reg${tmpJavaName}(CK_EQ, ${tmpUncapitalisedJavaName});
#end
    }
#if (${col.isAvailableStringNotEqual()})

    /**
     * NotEqual(&lt;&gt;). And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as notEqual. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    ${col.propertySettingModifier} void set${tmpJavaName}_NotEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        doSet${tmpJavaName}_NotEqual(fRES(${tmpUncapitalisedJavaName}));
    }
#if (${col.isAvailableStringEmptyString()})

    /**
     * NotEqual(&lt;&gt;). As the empty-string. And OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     */
    ${col.propertySettingModifier} void set${tmpJavaName}_NotEqual_EmptyString() {
        doSet${tmpJavaName}_NotEqual("");
    }
#end
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * NotEqual(&lt;&gt;). As ${col.classificationName}. And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdef The instance of classification definition (as ENUM type). (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_NotEqual_As${col.classificationName}(${glCDef}.${col.classificationName} cdef) {
        doSet${tmpJavaName}_NotEqual(cdef != null ? cdef.code() : null);
    }
#foreach ($classificationElement in $col.classificationTop.classificationElementList)

    /**
     * NotEqual(&lt;&gt;). As ${classificationElement.name} (${classificationElement.code}). And OnlyOnceRegistered. <br>
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
#if ($classificationElement.isDeprecated())
    @Deprecated
#end
    public void set${tmpJavaName}_NotEqual_${classificationElement.name}() {
        set${tmpJavaName}_NotEqual_As${col.classificationName}(${glCDef}.${col.classificationName}.${classificationElement.name});
    }
#end
#end

    protected void doSet${tmpJavaName}_NotEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
#if ($database.isShortCharHandlingValid() && $col.isJdbcTypeChar())
        reg${tmpJavaName}(${database.conditionQueryNotEqualDefinitionName}, hSC("${col.name}", ${tmpUncapitalisedJavaName}, ${col.columnSizeSettingExpression}, "${database.shortCharHandlingModeCode}"));
#else
        reg${tmpJavaName}(${database.conditionQueryNotEqualDefinitionName}, ${tmpUncapitalisedJavaName});
#end
    }
#end
#if (${col.isAvailableStringGreaterThan()})

    /**
     * GreaterThan(&gt;). And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as greaterThan. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_GreaterThan(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_GT, fRES(${tmpUncapitalisedJavaName}));
    }
#end
#if (${col.isAvailableStringLessThan()})

    /**
     * LessThan(&lt;). And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as lessThan. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_LessThan($col.javaNative ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_LT, fRES(${tmpUncapitalisedJavaName}));
    }
#end
#if (${col.isAvailableStringGreaterEqual()})

    /**
     * GreaterEqual(&gt;=). And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as greaterEqual. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_GreaterEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_GE, fRES(${tmpUncapitalisedJavaName}));
    }
#end
#if (${col.isAvailableStringLessEqual()})

    /**
     * LessEqual(&lt;=). And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as lessEqual. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_LessEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_LE, fRES(${tmpUncapitalisedJavaName}));
    }
#end
#if (${col.isAvailableStringInScope()})

    /**
     * InScope {in ('a', 'b')}. And NullOrEmptyIgnored, NullOrEmptyElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName}List The collection of ${col.uncapitalisedJavaName} as inScope. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    ${col.propertySettingModifierOfNativeInScope} void set${tmpJavaName}_InScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        doSet${tmpJavaName}_InScope(${tmpUncapitalisedJavaName}List);
    }
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * InScope {in ('a', 'b')}. As ${col.classificationName}. And NullOrEmptyIgnored, NullOrEmptyElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdefList The list of classification definition (as ENUM type). (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_InScope_As${col.classificationName}(Collection<${glCDef}.${col.classificationName}> cdefList) {
        doSet${tmpJavaName}_InScope(cTStrL(cdefList));
    }
#foreach ($group in $classificationTop.groupList)

    /**
     * InScope {in ('a', 'b')}. As ${col.classificationName}. And NullOrEmptyIgnored, NullOrEmptyElementIgnored, SeveralRegistered. <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc} <br>
#end
#if ($group.hasGroupComment())
     * ${group.groupCommentForJavaDoc} <br>
#end
     * ${group.buildElementDisp()}
     */
    public void set${tmpJavaName}_InScope_${group.groupNameInitCap}() {
        set${tmpJavaName}_InScope_As${col.classificationName}(${glCDef}.${col.classificationName}.listOf${group.groupNameInitCap}());
    }
#end
#end

    protected void doSet${tmpJavaName}_InScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        regINS(CK_INS, cTL(${tmpUncapitalisedJavaName}List), xgetCValue${tmpJavaName}(), "${col.name}");
    }
#end
#if (${col.isAvailableStringNotInScope()})

    /**
     * NotInScope {not in ('a', 'b')}. And NullOrEmptyIgnored, NullOrEmptyElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName}List The collection of ${col.uncapitalisedJavaName} as notInScope. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    ${col.propertySettingModifierOfNativeInScope} void set${tmpJavaName}_NotInScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        doSet${tmpJavaName}_NotInScope(${tmpUncapitalisedJavaName}List);
    }
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * NotInScope {not in ('a', 'b')}. As ${col.classificationName}. And NullOrEmptyIgnored, NullOrEmptyElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdefList The list of classification definition (as ENUM type). (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_NotInScope_As${col.classificationName}(Collection<${glCDef}.${col.classificationName}> cdefList) {
        doSet${tmpJavaName}_NotInScope(cTStrL(cdefList));
    }
#end

    protected void doSet${tmpJavaName}_NotInScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        regINS(CK_NINS, cTL(${tmpUncapitalisedJavaName}List), xgetCValue${tmpJavaName}(), "${col.name}");
    }
#end
#if (${col.isAvailableStringLikeSearch()})
#if ($table.isMakeCallbackConditionOptionSetup())

    /**
     * LikeSearch with various options. (versatile) {like '%xxx%' escape ...}. And NullOrEmptyIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
     * <pre>e.g. set${tmpJavaName}_LikeSearch("xxx", op <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> op.<span style="color: #CC4747">likeContain()</span>);</pre>
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as likeSearch. (basically NotNull, NotEmpty: error as default, or no condition as option)
     * @param opLambda The callback for option of like-search. (NotNull)
     */
    public void set${tmpJavaName}_LikeSearch(${col.javaNative} ${tmpUncapitalisedJavaName}, ConditionOptionCall<LikeSearchOption> opLambda) {
        set${tmpJavaName}_LikeSearch(${tmpUncapitalisedJavaName}, xcLSOP(opLambda));
    }
#end

    /**
     * LikeSearch with various options. (versatile) {like '%xxx%' escape ...}. And NullOrEmptyIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
     * <pre>e.g. set${tmpJavaName}_LikeSearch("xxx", new <span style="color: #CC4747">LikeSearchOption</span>().likeContain());</pre>
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as likeSearch. (basically NotNull, NotEmpty: error as default, or no condition as option)
     * @param likeSearchOption The option of like-search. (NotNull)
     */
    ${table.directConditionOptionMethodModifier} void set${tmpJavaName}_LikeSearch(${col.javaNative} ${tmpUncapitalisedJavaName}, LikeSearchOption likeSearchOption) {
        regLSQ(CK_LS, fRES(${tmpUncapitalisedJavaName}), xgetCValue${tmpJavaName}(), "${col.name}", likeSearchOption);
    }
#end
#if (${col.isAvailableStringNotLikeSearch()})
#if ($table.isMakeCallbackConditionOptionSetup())

    /**
     * NotLikeSearch with various options. (versatile) {not like 'xxx%' escape ...} <br>
     * And NullOrEmptyIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as notLikeSearch. (basically NotNull, NotEmpty: error as default, or no condition as option)
     * @param opLambda The callback for option of like-search. (NotNull)
     */
    public void set${tmpJavaName}_NotLikeSearch(${col.javaNative} ${tmpUncapitalisedJavaName}, ConditionOptionCall<LikeSearchOption> opLambda) {
        set${tmpJavaName}_NotLikeSearch(${tmpUncapitalisedJavaName}, xcLSOP(opLambda));
    }
#end

    /**
     * NotLikeSearch with various options. (versatile) {not like 'xxx%' escape ...} <br>
     * And NullOrEmptyIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as notLikeSearch. (basically NotNull, NotEmpty: error as default, or no condition as option)
     * @param likeSearchOption The option of not-like-search. (NotNull)
     */
    ${table.directConditionOptionMethodModifier} void set${tmpJavaName}_NotLikeSearch(${col.javaNative} ${tmpUncapitalisedJavaName}, LikeSearchOption likeSearchOption) {
        regLSQ(CK_NLS, fRES(${tmpUncapitalisedJavaName}), xgetCValue${tmpJavaName}(), "${col.name}", likeSearchOption);
    }
#end
#if (${col.isAvailableStringPrefixSearch()})

    /**
     * PrefixSearch {like 'xxx%' escape ...}. And NullOrEmptyIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as prefixSearch. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_PrefixSearch(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        set${tmpJavaName}_LikeSearch(${tmpUncapitalisedJavaName}, xcLSOPPre());
    }
#end
#foreach ($referrer in $col.existsReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${referrer.referrerLambdaSubQueryCBName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($relationMethodIdentityName = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyName = "${referrer.referrerPropertyName}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($relationMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#end

    /**
     * Set up ExistsReferrer (correlated sub-query). <br>
     * {exists (select ${referrer.firstLocalColumnName} from ${referrer.table.tableDbName} where ...)} <br>
     * ${referrer.referrerDispAsOneForJavaDoc}
     * <pre>
     * cb.query().<span style="color: #CC4747">exists${relationMethodIdentityName}</span>(${referrer.referrerLambdaExampleCBName} <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ${referrer.referrerLambdaExampleCBName}.query().set...
     * });
     * </pre>
     * @param ${relatedLambdaName} The callback for sub-query of ${relationPropertyNameInitCap} for 'exists'. (NotNull)
     */
    public void exists${relationMethodIdentityName}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForExistsReferrer(this);
        lockCall(() -> ${relatedLambdaName}.query(cb)); String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerExistsReferrer(cb.query(), "${col.name}", "${referrer.firstLocalColumnName}", pp, "${relationPropertyName}");
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#foreach ($referrer in $col.existsReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${referrer.referrerLambdaSubQueryCBName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($relationMethodIdentityName = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyName = "${referrer.referrerPropertyName}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($relationMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#end

    /**
     * Set up NotExistsReferrer (correlated sub-query). <br>
     * {not exists (select ${referrer.firstLocalColumnName} from ${referrer.table.tableDbName} where ...)} <br>
     * ${referrer.referrerDispAsOneForJavaDoc}
     * <pre>
     * cb.query().<span style="color: #CC4747">notExists${relationMethodIdentityName}</span>(${referrer.referrerLambdaExampleCBName} <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ${referrer.referrerLambdaExampleCBName}.query().set...
     * });
     * </pre>
     * @param ${relatedLambdaName} The callback for sub-query of ${subQueryPropertyNameInitCap} for 'not exists'. (NotNull)
     */
    public void notExists${relationMethodIdentityName}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForExistsReferrer(this);
        lockCall(() -> ${relatedLambdaName}.query(cb)); String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerNotExistsReferrer(cb.query(), "${col.name}", "${referrer.FirstLocalColumnName}", pp, "${relationPropertyName}");
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#foreach ($referrer in $col.derivedReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_SpecifyDerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_SpecifyDerivedReferrer_${referrer.referrerPropertyNameInitCap}")

    public void xsderive${referrer.referrerPropertyNameInitCap}(String fn, SubQuery<${relatedCBClassName}> sq, String al, DerivedReferrerOption op) {
        assertObjectNotNull("subQuery", sq);
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForDerivedReferrer(this);
        lockCall(() -> sq.query(cb)); String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerSpecifyDerivedReferrer(fn, cb.query(), "${col.name}", "${referrer.firstLocalColumnName}", pp, "${referrer.referrerPropertyName}", al, op);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#foreach ($referrer in $col.derivedReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($relationMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_QueryDerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_QueryDerivedReferrer_${referrer.referrerPropertyNameInitCap}")

    /**
     * Prepare for (Query)DerivedReferrer (correlated sub-query). <br>
     * {FOO &lt;= (select max(BAR) from ${referrer.table.tableDbName} where ...)} <br>
     * ${referrer.referrerDispAsOneForJavaDoc}
     * <pre>
     * cb.query().<span style="color: #CC4747">derived${relationMethodIdentityName}()</span>.<span style="color: #CC4747">max</span>(${referrer.referrerLambdaExampleCBName} <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ${referrer.referrerLambdaExampleCBName}.specify().<span style="color: #CC4747">columnFoo...</span> <span style="color: #3F7E5E">// derived column by function</span>
     *     ${referrer.referrerLambdaExampleCBName}.query().setBar... <span style="color: #3F7E5E">// referrer condition</span>
     * }).<span style="color: #CC4747">greaterEqual</span>(123); <span style="color: #3F7E5E">// condition to derived column</span>
     * </pre>
     * @return The object to set up a function for referrer table. (NotNull)
     */
    public HpQDRFunction<${relatedCBClassName}> derived${relationMethodIdentityName}() {
        return xcreateQDRFunction${referrer.referrerPropertyNameInitCap}();
    }
    protected HpQDRFunction<${relatedCBClassName}> xcreateQDRFunction${referrer.referrerPropertyNameInitCap}() {
        return xcQDRFunc((fn, sq, rd, vl, op) -> xqderive${referrer.referrerPropertyNameInitCap}(fn, sq, rd, vl, op));
    }
    public void xqderive${referrer.referrerPropertyNameInitCap}(String fn, SubQuery<${relatedCBClassName}> sq, String rd, Object vl, DerivedReferrerOption op) {
        assertObjectNotNull("subQuery", sq);
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForDerivedReferrer(this);
        lockCall(() -> sq.query(cb)); String sqpp = keep${subQueryPropertyNameInitCap}(cb.query()); String prpp = keep${subQueryPropertyNameInitCap}Parameter(vl);
        registerQueryDerivedReferrer(fn, cb.query(), "${col.name}", "${referrer.firstLocalColumnName}", sqpp, "${referrer.referrerPropertyName}", rd, vl, prpp, op);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
    public abstract String keep${subQueryPropertyNameInitCap}Parameter(Object vl);
#end
#if (${col.isInScopeRelationAllowedForeignKey()})
#set ($relatedCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${fk.foreignTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${fk.foreignLambdaSubQueryCBName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeRelation_${fk.foreignPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeRelation_${fk.foreignPropertyNameInitCap}")

    /**
     * Set up InScopeRelation (sub-query). <br />
     * {in (select ${fk.firstLocalColumnName} from ${fk.foreignTable.tableDbName} where ...)} <br />
     * ${fk.foreignDispForJavaDoc}
     * @param ${relatedLambdaName} The callback for sub-query of ${fk.foreignPropertyNameInitCap} for 'in-scope'. (NotNull)
     */
    public void inScope${fk.foreignPropertyNameInitCap}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForInScopeRelation(this);
        try { lock(); ${relatedLambdaName}.query(cb); } finally { unlock(); }
        String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerInScopeRelation(cb.query(), "${col.name}", "${fk.firstForeignColumnName}", pp, "${fk.foreignPropertyName}", false);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#if (${col.isInScopeRelationAllowedForeignKey()})
#set ($relatedCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${fk.foreignTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${fk.foreignLambdaSubQueryCBName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeRelation_${fk.foreignPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeRelation_${fk.foreignPropertyNameInitCap}")

    /**
     * Set up NotInScopeRelation (sub-query). <br />
     * {not in (select ${col.foreignKey.firstLocalColumnName} from ${fk.foreignTable.tableDbName} where ...)} <br />
     * ${fk.foreignDispForJavaDoc}
     * @param ${relatedLambdaName} The callback for sub-query of ${fk.foreignPropertyNameInitCap} for 'not in-scope'. (NotNull)
     */
    public void notInScope${fk.foreignPropertyNameInitCap}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForInScopeRelation(this);
        try { lock(); ${relatedLambdaName}.query(cb); } finally { unlock(); }
        String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerInScopeRelation(cb.query(), "${col.name}", "${fk.firstForeignColumnName}", pp, "${fk.foreignPropertyName}", true);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#end
#if (${col.isJavaNativeNumberObject()})
    /**
     * Equal(=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as equal. (basically NotNull: error as default, or no condition as option)
     */
    ${col.propertySettingModifier} void set${tmpJavaName}_Equal(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        doSet${tmpJavaName}_Equal(${tmpUncapitalisedJavaName});
    }
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * Equal(=). As ${col.classificationName}. And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdef The instance of classification definition (as ENUM type). (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_Equal_As${col.classificationName}(${glCDef}.${col.classificationName} cdef) {
        doSet${tmpJavaName}_Equal(cTNum(cdef != null ? cdef.code() : null, ${col.javaNative}.class));
    }
#if ($classificationTop.isSisterBooleanHandling())

    /**
     * Equal(=). As boolean for ${col.classificationName}. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param determination The determination, true or false. (basically NotNull: error as default, or no condition as option)
     */
    public void set${col.javaName}_Equal_AsBoolean(Boolean determination) {
        set${tmpJavaName}_Equal_As${col.classificationName}(${glCDef}.${col.classificationName}.codeOf(determination));
    }
#end
#foreach ($classificationElement in $col.classificationTop.classificationElementList)

    /**
     * Equal(=). As ${classificationElement.name} (${classificationElement.code}). And NullIgnored, OnlyOnceRegistered. <br>
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
#if ($classificationElement.isDeprecated())
    @Deprecated
#end
    public void set${tmpJavaName}_Equal_${classificationElement.name}() {
        set${tmpJavaName}_Equal_As${col.classificationName}(${glCDef}.${col.classificationName}.${classificationElement.name});
    }
#end
#end

    protected void doSet${tmpJavaName}_Equal(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_EQ, ${tmpUncapitalisedJavaName});
    }
#if (${col.isAvailableNumberNotEqual()})

    /**
     * NotEqual(&lt;&gt;). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as notEqual. (basically NotNull: error as default, or no condition as option)
     */
    ${col.propertySettingModifier} void set${tmpJavaName}_NotEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        doSet${tmpJavaName}_NotEqual(${tmpUncapitalisedJavaName});
    }
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * NotEqual(&lt;&gt;). As ${col.classificationName}. And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdef The instance of classification definition (as ENUM type). (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_NotEqual_As${col.classificationName}(${glCDef}.${col.classificationName} cdef) {
        doSet${tmpJavaName}_NotEqual(cTNum(cdef != null ? cdef.code() : null, ${col.javaNative}.class));
    }
#foreach ($classificationElement in $col.classificationTop.classificationElementList)

    /**
     * NotEqual(&lt;&gt;). As ${classificationElement.name} (${classificationElement.code}). And NullIgnored, OnlyOnceRegistered. <br>
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
#if ($classificationElement.isDeprecated())
    @Deprecated
#end
    public void set${tmpJavaName}_NotEqual_${classificationElement.name}() {
        set${tmpJavaName}_NotEqual_As${col.classificationName}(${glCDef}.${col.classificationName}.${classificationElement.name});
    }
#end
#end

    protected void doSet${tmpJavaName}_NotEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(${database.conditionQueryNotEqualDefinitionName}, ${tmpUncapitalisedJavaName});
    }
#end
#if (${col.isAvailableNumberGreaterThan()})

    /**
     * GreaterThan(&gt;). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as greaterThan. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_GreaterThan(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_GT, ${tmpUncapitalisedJavaName});
    }
#end
#if (${col.isAvailableNumberLessThan()})

    /**
     * LessThan(&lt;). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as lessThan. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_LessThan(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_LT, ${tmpUncapitalisedJavaName});
    }
#end
#if (${col.isAvailableNumberGreaterEqual()})

    /**
     * GreaterEqual(&gt;=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as greaterEqual. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_GreaterEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_GE, ${tmpUncapitalisedJavaName});
    }
#end
#if (${col.isAvailableNumberLessEqual()})

    /**
     * LessEqual(&lt;=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as lessEqual. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_LessEqual(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_LE, ${tmpUncapitalisedJavaName});
    }
#end
#if (${col.isAvailableNumberRangeOf()})
#if ($table.isMakeCallbackConditionOptionSetup())

    /**
     * RangeOf with various options. (versatile) <br>
     * {(default) minNumber &lt;= column &lt;= maxNumber} <br>
     * And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param minNumber The min number of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param maxNumber The max number of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param opLambda The callback for option of range-of. (NotNull)
     */
    public void set${tmpJavaName}_RangeOf(${col.javaNative} minNumber, ${col.javaNative} maxNumber, ConditionOptionCall<RangeOfOption> opLambda) {
        set${tmpJavaName}_RangeOf(minNumber, maxNumber, xcROOP(opLambda));
    }
#end

    /**
     * RangeOf with various options. (versatile) <br>
     * {(default) minNumber &lt;= column &lt;= maxNumber} <br>
     * And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param minNumber The min number of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param maxNumber The max number of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param rangeOfOption The option of range-of. (NotNull)
     */
    ${table.directConditionOptionMethodModifier} void set${tmpJavaName}_RangeOf(${col.javaNative} minNumber, ${col.javaNative} maxNumber, RangeOfOption rangeOfOption) {
        regROO(minNumber, maxNumber, xgetCValue${tmpJavaName}(), "${col.name}", rangeOfOption);
    }
#end
#if (${col.isAvailableNumberInScope()})

    /**
     * InScope {in (1, 2)}. And NullIgnored, NullElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName}List The collection of ${col.uncapitalisedJavaName} as inScope. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    ${col.propertySettingModifierOfNativeInScope} void set${tmpJavaName}_InScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        doSet${tmpJavaName}_InScope(${tmpUncapitalisedJavaName}List);
    }
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * InScope {in (1, 2)}. As ${col.classificationName}. And NullIgnored, NullElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdefList The list of classification definition (as ENUM type). (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_InScope_As${col.classificationName}(Collection<${glCDef}.${col.classificationName}> cdefList) {
        doSet${tmpJavaName}_InScope(cTNumL(cdefList, ${col.javaNative}.class));
    }
#foreach ($group in $classificationTop.groupList)

    /**
     * InScope {in (1, 2)}. As ${col.classificationName}. And NullIgnored, NullElementIgnored, SeveralRegistered. <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc} <br>
#end
#if ($group.hasGroupComment())
     * ${group.groupCommentForJavaDoc} <br>
#end
     * ${group.buildElementDisp()}
     */
    public void set${tmpJavaName}_InScope_${group.groupNameInitCap}() {
        set${tmpJavaName}_InScope_As${col.classificationName}(${glCDef}.${col.classificationName}.listOf${group.groupNameInitCap}());
    }
#end
#end

    protected void doSet${tmpJavaName}_InScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        regINS(CK_INS, cTL(${tmpUncapitalisedJavaName}List), xgetCValue${tmpJavaName}(), "${col.name}");
    }
#end
#if (${col.isAvailableNumberNotInScope()})

    /**
     * NotInScope {not in (1, 2)}. And NullIgnored, NullElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName}List The collection of ${col.uncapitalisedJavaName} as notInScope. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    ${col.propertySettingModifierOfNativeInScope} void set${tmpJavaName}_NotInScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        doSet${tmpJavaName}_NotInScope(${tmpUncapitalisedJavaName}List);
    }
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * NotInScope {not in (1, 2)}. As ${col.classificationName}. And NullIgnored, NullElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdefList The list of classification definition (as ENUM type). (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_NotInScope_As${col.classificationName}(Collection<${glCDef}.${col.classificationName}> cdefList) {
        doSet${tmpJavaName}_NotInScope(cTNumL(cdefList, ${col.javaNative}.class));
    }
#end

    protected void doSet${tmpJavaName}_NotInScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        regINS(CK_NINS, cTL(${tmpUncapitalisedJavaName}List), xgetCValue${tmpJavaName}(), "${col.name}");
    }
#end
#foreach ($referrer in $col.existsReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${referrer.referrerLambdaSubQueryCBName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($relationMethodIdentityName = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyName = "${referrer.referrerPropertyName}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($relationMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#end

    /**
     * Set up ExistsReferrer (correlated sub-query). <br>
     * {exists (select ${referrer.firstLocalColumnName} from ${referrer.table.tableDbName} where ...)} <br>
     * ${referrer.referrerDispAsOneForJavaDoc}
     * <pre>
     * cb.query().<span style="color: #CC4747">exists${relationMethodIdentityName}</span>(${referrer.referrerLambdaExampleCBName} <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ${referrer.referrerLambdaExampleCBName}.query().set...
     * });
     * </pre>
     * @param ${relatedLambdaName} The callback for sub-query of ${relationPropertyNameInitCap} for 'exists'. (NotNull)
     */
    public void exists${relationMethodIdentityName}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForExistsReferrer(this);
        lockCall(() -> ${relatedLambdaName}.query(cb)); String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerExistsReferrer(cb.query(), "${col.name}", "${referrer.firstLocalColumnName}", pp, "${relationPropertyName}");
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#foreach ($referrer in $col.existsReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${referrer.referrerLambdaSubQueryCBName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($relationMethodIdentityName = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyName = "${referrer.referrerPropertyName}")
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($relationMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsReferrer_${referrer.referrerPropertyNameInitCap}")
#end

    /**
     * Set up NotExistsReferrer (correlated sub-query). <br>
     * {not exists (select ${referrer.firstLocalColumnName} from ${referrer.table.tableDbName} where ...)} <br>
     * ${referrer.referrerDispAsOneForJavaDoc}
     * <pre>
     * cb.query().<span style="color: #CC4747">notExists${relationMethodIdentityName}</span>(${referrer.referrerLambdaExampleCBName} <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ${referrer.referrerLambdaExampleCBName}.query().set...
     * });
     * </pre>
     * @param ${relatedLambdaName} The callback for sub-query of ${subQueryPropertyNameInitCap} for 'not exists'. (NotNull)
     */
    public void notExists${relationMethodIdentityName}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForExistsReferrer(this);
        lockCall(() -> ${relatedLambdaName}.query(cb)); String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerNotExistsReferrer(cb.query(), "${col.name}", "${referrer.firstLocalColumnName}", pp, "${relationPropertyName}");
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#foreach ($referrer in $col.derivedReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_SpecifyDerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_SpecifyDerivedReferrer_${referrer.referrerPropertyNameInitCap}")

    public void xsderive${referrer.referrerPropertyNameInitCap}(String fn, SubQuery<${relatedCBClassName}> sq, String al, DerivedReferrerOption op) {
        assertObjectNotNull("subQuery", sq);
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForDerivedReferrer(this);
        lockCall(() -> sq.query(cb)); String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerSpecifyDerivedReferrer(fn, cb.query(), "${col.name}", "${referrer.firstLocalColumnName}", pp, "${referrer.referrerPropertyName}", al, op);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#foreach ($referrer in $col.derivedReferrerReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($relationMethodIdentityName = "${referrer.referrerConditionMethodIdentityName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_QueryDerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_QueryDerivedReferrer_${referrer.referrerPropertyNameInitCap}")

    /**
     * Prepare for (Query)DerivedReferrer (correlated sub-query). <br>
     * {FOO &lt;= (select max(BAR) from ${referrer.table.tableDbName} where ...)} <br>
     * ${referrer.referrerDispAsOneForJavaDoc}
     * <pre>
     * cb.query().<span style="color: #CC4747">derived${relationMethodIdentityName}()</span>.<span style="color: #CC4747">max</span>(${referrer.referrerLambdaExampleCBName} <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     ${referrer.referrerLambdaExampleCBName}.specify().<span style="color: #CC4747">columnFoo...</span> <span style="color: #3F7E5E">// derived column by function</span>
     *     ${referrer.referrerLambdaExampleCBName}.query().setBar... <span style="color: #3F7E5E">// referrer condition</span>
     * }).<span style="color: #CC4747">greaterEqual</span>(123); <span style="color: #3F7E5E">// condition to derived column</span>
     * </pre>
     * @return The object to set up a function for referrer table. (NotNull)
     */
    public HpQDRFunction<${relatedCBClassName}> derived${relationMethodIdentityName}() {
        return xcreateQDRFunction${referrer.referrerPropertyNameInitCap}();
    }
    protected HpQDRFunction<${relatedCBClassName}> xcreateQDRFunction${referrer.referrerPropertyNameInitCap}() {
        return xcQDRFunc((fn, sq, rd, vl, op) -> xqderive${referrer.referrerPropertyNameInitCap}(fn, sq, rd, vl, op));
    }
    public void xqderive${referrer.referrerPropertyNameInitCap}(String fn, SubQuery<${relatedCBClassName}> sq, String rd, Object vl, DerivedReferrerOption op) {
        assertObjectNotNull("subQuery", sq);
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForDerivedReferrer(this);
        lockCall(() -> sq.query(cb)); String sqpp = keep${subQueryPropertyNameInitCap}(cb.query()); String prpp = keep${subQueryPropertyNameInitCap}Parameter(vl);
        registerQueryDerivedReferrer(fn, cb.query(), "${col.name}", "${referrer.firstLocalColumnName}", sqpp, "${referrer.referrerPropertyName}", rd, vl, prpp, op);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
    public abstract String keep${subQueryPropertyNameInitCap}Parameter(Object vl);
#end
#if (${col.isInScopeRelationAllowedForeignKey()})
#set ($relatedCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${fk.foreignTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${fk.foreignLambdaSubQueryCBName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeRelation_${fk.foreignPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeRelation_${fk.foreignPropertyNameInitCap}")

    /**
     * Set up InScopeRelation (sub-query). <br />
     * {in (select ${fk.firstLocalColumnName} from ${fk.foreignTable.tableDbName} where ...)} <br />
     * ${fk.foreignDispForJavaDoc}
     * @param ${relatedLambdaName} The callback for sub-query of ${fk.foreignPropertyNameInitCap} for 'in-scope'. (NotNull)
     */
    public void inScope${fk.foreignPropertyNameInitCap}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForInScopeRelation(this);
        try { lock(); ${relatedLambdaName}.query(cb); } finally { unlock(); }
        String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerInScopeRelation(cb.query(), "${col.name}", "${fk.firstForeignColumnName}", pp, "${fk.foreignPropertyName}", false);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#if (${col.isInScopeRelationAllowedForeignKey()})
#set ($relatedCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${fk.foreignTableExtendedConditionQueryClassName}")
#set ($relatedLambdaName = "${fk.foreignLambdaSubQueryCBName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeRelation_${fk.foreignPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeRelation_${fk.foreignPropertyNameInitCap}")

    /**
     * Set up NotInScopeRelation (sub-query). <br />
     * {not in (select ${col.foreignKey.firstLocalColumnName} from ${fk.foreignTable.tableDbName} where ...)} <br />
     * ${fk.foreignDispForJavaDoc}
     * @param ${relatedLambdaName} The callback for sub-query of ${fk.foreignPropertyNameInitCap} for 'not in-scope'. (NotNull)
     */
    public void notInScope${fk.foreignPropertyNameInitCap}(SubQuery<${relatedCBClassName}> ${relatedLambdaName}) {
        assertObjectNotNull("${relatedLambdaName}", ${relatedLambdaName});
        ${relatedCBClassName} cb = new ${relatedCBClassName}(); cb.xsetupForInScopeRelation(this);
        try { lock(); ${relatedLambdaName}.query(cb); } finally { unlock(); }
        String pp = keep${subQueryPropertyNameInitCap}(cb.query());
        registerInScopeRelation(cb.query(), "${col.name}", "${col.foreignKey.firstForeignColumnName}", pp, "${fk.foreignPropertyName}", true);
    }
    public abstract String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} sq);
#end
#end
#if (${col.isJavaNativeDateObject()})
    /**
     * Equal(=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as equal. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_Equal($col.javaNative ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_EQ, #if ($col.isJavaNativeUtilDate()) fCTPD(${tmpUncapitalisedJavaName})#else ${tmpUncapitalisedJavaName}#end);
    }
#if (${col.isAvailableDateNotEqual()})

    /**
     * NotEqual(&lt;&gt;). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as notEqual. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_NotEqual($col.javaNative ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(${database.conditionQueryNotEqualDefinitionName}, #if ($col.isJavaNativeUtilDate()) fCTPD(${tmpUncapitalisedJavaName})#else ${tmpUncapitalisedJavaName}#end);
    }
#end
#if (${col.isAvailableDateGreaterThan()})

    /**
     * GreaterThan(&gt;). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as greaterThan. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_GreaterThan($col.javaNative ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_GT, #if ($col.isJavaNativeUtilDate()) fCTPD(${tmpUncapitalisedJavaName})#else ${tmpUncapitalisedJavaName}#end);
    }
#end
#if (${col.isAvailableDateLessThan()})

    /**
     * LessThan(&lt;). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as lessThan. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_LessThan($col.javaNative ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_LT, #if ($col.isJavaNativeUtilDate()) fCTPD(${tmpUncapitalisedJavaName})#else ${tmpUncapitalisedJavaName}#end);
    }
#end
#if (${col.isAvailableDateGreaterEqual()})

    /**
     * GreaterEqual(&gt;=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as greaterEqual. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_GreaterEqual($col.javaNative ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_GE, #if ($col.isJavaNativeUtilDate()) fCTPD(${tmpUncapitalisedJavaName})#else ${tmpUncapitalisedJavaName}#end);
    }
#end
#if (${col.isAvailableDateLessEqual()})

    /**
     * LessEqual(&lt;=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as lessEqual. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_LessEqual($col.javaNative ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_LE,#if ($col.isJavaNativeUtilDate()) fCTPD(${tmpUncapitalisedJavaName})#else ${tmpUncapitalisedJavaName}#end);
    }
#end
#if (${col.isAvailableDateFromTo()})
#if ($table.isMakeCallbackConditionOptionSetup())

    /**
     * FromTo with various options. (versatile) {(default) fromDatetime &lt;= column &lt;= toDatetime} <br>
     * And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * <pre>e.g. set${tmpJavaName}_FromTo(fromDate, toDate, op <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> op.<span style="color: #CC4747">compareAsDate()</span>);</pre>
     * @param fromDatetime The from-datetime(yyyy/MM/dd HH:mm:ss.SSS) of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param toDatetime The to-datetime(yyyy/MM/dd HH:mm:ss.SSS) of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param opLambda The callback for option of from-to. (NotNull)
     */
    public void set${tmpJavaName}_FromTo(${col.fromToJavaNativeDate} fromDatetime, ${col.fromToJavaNativeDate} toDatetime, ConditionOptionCall<FromToOption> opLambda) {
        set${tmpJavaName}_FromTo(fromDatetime, toDatetime, xcFTOP(opLambda));
    }
#end

    /**
     * FromTo with various options. (versatile) {(default) fromDatetime &lt;= column &lt;= toDatetime} <br>
     * And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * <pre>e.g. set${tmpJavaName}_FromTo(fromDate, toDate, new <span style="color: #CC4747">FromToOption</span>().compareAsDate());</pre>
     * @param fromDatetime The from-datetime(yyyy/MM/dd HH:mm:ss.SSS) of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param toDatetime The to-datetime(yyyy/MM/dd HH:mm:ss.SSS) of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param fromToOption The option of from-to. (NotNull)
     */
    ${table.directConditionOptionMethodModifier} void set${tmpJavaName}_FromTo(${col.fromToJavaNativeDate} fromDatetime, ${col.fromToJavaNativeDate} toDatetime, FromToOption fromToOption) {
#if ($col.isJavaNativeUtilDate())
        regFTQ(fCTPD(fromDatetime), fCTPD(toDatetime), xgetCValue${tmpJavaName}(), "${col.name}", fromToOption);
#elseif ($col.isJavaNativeNextTimeLocal())
        String nm = "${col.name}"; FromToOption op = fromToOption;
        regFTQ(xfFTHD(fromDatetime, nm, op), xfFTHD(toDatetime, nm, op), xgetCValue${tmpJavaName}(), nm, op);
#else
        regFTQ((fromDatetime != null ? new ${col.javaNative}(fromDatetime.getTime()) : null), (toDatetime != null ? new ${col.javaNative}(toDatetime.getTime()) : null), xgetCValue${tmpJavaName}(), "${col.name}", fromToOption);
#end
    }
#end
#if (${col.isAvailableDateDateFromTo()})

    /**
     * DateFromTo. (Date means yyyy/MM/dd) {fromDate &lt;= column &lt; toDate + 1 day} <br>
     * And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * <pre>
     * e.g. from:{2007/04/10 08:24:53} to:{2007/04/16 14:36:29}
     *  column &gt;= '2007/04/10 00:00:00' and column <span style="color: #CC4747">&lt; '2007/04/17 00:00:00'</span>
     * </pre>
     * @param fromDate The from-date(yyyy/MM/dd) of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     * @param toDate The to-date(yyyy/MM/dd) of ${col.uncapitalisedJavaName}. (basically NotNull: if op.allowOneSide(), null allowed)
     */
    public void set${tmpJavaName}_DateFromTo(${col.fromToJavaNativeDate} fromDate, ${col.fromToJavaNativeDate} toDate) {
        set${tmpJavaName}_FromTo(fromDate, toDate, xcDFTOP());
    }
#end
#if (${col.isAvailableDateInScope()})

    /**
     * InScope {in ('1965-03-03', '1966-09-15')}. And NullOrEmptyIgnored, NullElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName}List The collection of ${col.uncapitalisedJavaName} as inScope. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_InScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        doSet${tmpJavaName}_InScope(${tmpUncapitalisedJavaName}List);
    }

    protected void doSet${tmpJavaName}_InScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        regINS(CK_INS, cTL(${tmpUncapitalisedJavaName}List), xgetCValue${tmpJavaName}(), "${col.name}");
    }
#end
#if (${col.isAvailableDateNotInScope()})

    /**
     * NotInScope {not in ('1965-03-03', '1966-09-15')}. And NullOrEmptyIgnored, NullElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName}List The collection of ${col.uncapitalisedJavaName} as notInScope. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_NotInScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        doSet${tmpJavaName}_NotInScope(${tmpUncapitalisedJavaName}List);
    }

    protected void doSet${tmpJavaName}_NotInScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        regINS(CK_NINS, cTL(${tmpUncapitalisedJavaName}List), xgetCValue${tmpJavaName}(), "${col.name}");
    }
#end
#end
#if (${col.isJavaNativeBooleanObject()})
    /**
     * Equal(=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as equal. (basically NotNull: error as default, or no condition as option)
     */
    ${col.propertySettingModifier} void set${tmpJavaName}_Equal(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_EQ, ${tmpUncapitalisedJavaName});
    }
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))

    /**
     * Equal(=). As ${col.classificationName}. And NullOrEmptyIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdef The instance of classification definition (as ENUM type). (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_Equal_As${col.classificationName}(${glCDef}.${col.classificationName} cdef) {
        doSet${tmpJavaName}_Equal(cdef != null ? ${col.javaNative}.valueOf(cdef.code()) : null);
    }
#foreach ($classificationElement in $col.classificationTop.classificationElementList)

    /**
     * Equal(=). As ${classificationElement.name}. And OnlyOnceRegistered. <br>
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
#if ($classificationElement.isDeprecated())
    @Deprecated
#end
    public void set${tmpJavaName}_Equal_${classificationElement.name}() {
        doSet${tmpJavaName}_Equal(${col.javaNative}.valueOf(${glCDef}.${col.classificationName}.${classificationElement.name}.code()));
    }
#end

    protected void doSet${tmpJavaName}_Equal(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_EQ, ${tmpUncapitalisedJavaName});
    }
#end
#end
#if (${col.isJavaNativeUUIDObject()})
    /**
     * Equal(=). And NullIgnored, OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName} The value of ${col.uncapitalisedJavaName} as equal. (basically NotNull: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_Equal(${col.javaNative} ${tmpUncapitalisedJavaName}) {
        reg${tmpJavaName}(CK_EQ, ${tmpUncapitalisedJavaName});
    }
#if (${col.isAvailableStringInScope()})

    /**
     * InScope {in ('a', 'b')}. And NullOrEmptyIgnored, NullOrEmptyElementIgnored, SeveralRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     * @param ${tmpUncapitalisedJavaName}List The collection of ${col.uncapitalisedJavaName} as inScope. (basically NotNull, NotEmpty: error as default, or no condition as option)
     */
    public void set${tmpJavaName}_InScope(Collection<${col.javaNative}> ${tmpUncapitalisedJavaName}List) {
        regINS(CK_INS, cTL(${tmpUncapitalisedJavaName}List), xgetCValue${tmpJavaName}(), "${col.name}");
    }
#end
#end
#if (!${col.isNotNull()} || ${col.isPrimaryKey()})
#if (${col.isAvailableIsNull()})

    /**
     * IsNull {is null}. And OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     */
    public void set${tmpJavaName}_IsNull() { reg${tmpJavaName}(CK_ISN, DOBJ); }
#end
#if ($col.isMakeIsNullOrEmpty())
#if (${col.isAvailableIsNullOrEmpty()})

    /**
     * IsNullOrEmpty {is null or empty}. And OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     */
    public void set${tmpJavaName}_IsNullOrEmpty() { reg${tmpJavaName}(CK_ISNOE, DOBJ); }
#end
#end
#if (${col.isAvailableIsNotNull()})

    /**
     * IsNotNull {is not null}. And OnlyOnceRegistered. <br>
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}}
     */
    public void set${tmpJavaName}_IsNotNull() { reg${tmpJavaName}(CK_ISNN, DOBJ); }
#end
#end

    protected void reg${tmpJavaName}(ConditionKey ky, Object vl) { regQ(ky, vl, xgetCValue${tmpJavaName}(), "${col.name}"); }
    protected abstract ConditionValue xgetCValue${tmpJavaName}();
#set ($columnLoopIndex = $columnLoopIndex + 1)
#end
#if ($table.isAvailableMyselfScalarCondition())

    // ===================================================================================
    //                                                                     ScalarCondition
    //                                                                     ===============
    /**
     * Prepare ScalarCondition as equal. <br>
     * {where FOO = (select max(BAR) from ...)}
     * <pre>
     * cb.query().scalar_Equal().<span style="color: #CC4747">avg</span>(<span style="color: #553000">purchaseCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">purchaseCB</span>.specify().<span style="color: #CC4747">columnPurchasePrice</span>(); <span style="color: #3F7E5E">// *Point!</span>
     *     <span style="color: #553000">purchaseCB</span>.query().setPaymentCompleteFlg_Equal_True();
     * });
     * </pre>
     * @return The object to set up a function. (NotNull)
     */
    public HpSLCFunction<${myConditionBeanClassName}> scalar_Equal() {
        return xcreateSLCFunction(CK_EQ, ${myConditionBeanClassName}.class);
    }

    /**
     * Prepare ScalarCondition as equal. <br>
     * {where FOO &lt;&gt; (select max(BAR) from ...)}
     * <pre>
     * cb.query().scalar_Equal().<span style="color: #CC4747">avg</span>(<span style="color: #553000">purchaseCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">purchaseCB</span>.specify().<span style="color: #CC4747">columnPurchasePrice</span>(); <span style="color: #3F7E5E">// *Point!</span>
     *     <span style="color: #553000">purchaseCB</span>.query().setPaymentCompleteFlg_Equal_True();
     * });
     * </pre>
     * @return The object to set up a function. (NotNull)
     */
    public HpSLCFunction<${myConditionBeanClassName}> scalar_NotEqual() {
        return xcreateSLCFunction(CK_NES, ${myConditionBeanClassName}.class);
    }

    /**
     * Prepare ScalarCondition as greaterThan. <br>
     * {where FOO &gt; (select max(BAR) from ...)}
     * <pre>
     * cb.query().scalar_Equal().<span style="color: #CC4747">avg</span>(<span style="color: #553000">purchaseCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">purchaseCB</span>.specify().<span style="color: #CC4747">columnPurchasePrice</span>(); <span style="color: #3F7E5E">// *Point!</span>
     *     <span style="color: #553000">purchaseCB</span>.query().setPaymentCompleteFlg_Equal_True();
     * });
     * </pre>
     * @return The object to set up a function. (NotNull)
     */
    public HpSLCFunction<${myConditionBeanClassName}> scalar_GreaterThan() {
        return xcreateSLCFunction(CK_GT, ${myConditionBeanClassName}.class);
    }

    /**
     * Prepare ScalarCondition as lessThan. <br>
     * {where FOO &lt; (select max(BAR) from ...)}
     * <pre>
     * cb.query().scalar_Equal().<span style="color: #CC4747">avg</span>(<span style="color: #553000">purchaseCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">purchaseCB</span>.specify().<span style="color: #CC4747">columnPurchasePrice</span>(); <span style="color: #3F7E5E">// *Point!</span>
     *     <span style="color: #553000">purchaseCB</span>.query().setPaymentCompleteFlg_Equal_True();
     * });
     * </pre>
     * @return The object to set up a function. (NotNull)
     */
    public HpSLCFunction<${myConditionBeanClassName}> scalar_LessThan() {
        return xcreateSLCFunction(CK_LT, ${myConditionBeanClassName}.class);
    }

    /**
     * Prepare ScalarCondition as greaterEqual. <br>
     * {where FOO &gt;= (select max(BAR) from ...)}
     * <pre>
     * cb.query().scalar_Equal().<span style="color: #CC4747">avg</span>(<span style="color: #553000">purchaseCB</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">purchaseCB</span>.specify().<span style="color: #CC4747">columnPurchasePrice</span>(); <span style="color: #3F7E5E">// *Point!</span>
     *     <span style="color: #553000">purchaseCB</span>.query().setPaymentCompleteFlg_Equal_True();
     * });
     * </pre>
     * @return The object to set up a function. (NotNull)
     */
    public HpSLCFunction<${myConditionBeanClassName}> scalar_GreaterEqual() {
        return xcreateSLCFunction(CK_GE, ${myConditionBeanClassName}.class);
    }

    /**
     * Prepare ScalarCondition as lessEqual. <br>
     * {where FOO &lt;= (select max(BAR) from ...)}
     * <pre>
     * cb.query().<span style="color: #CC4747">scalar_LessEqual()</span>.max(new SubQuery&lt;${myConditionBeanClassName}&gt;() {
     *     public void query(${myConditionBeanClassName} subCB) {
     *         subCB.specify().setFoo... <span style="color: #3F7E5E">// derived column for function</span>
     *         subCB.query().setBar...
     *     }
     * });
     * </pre>
     * @return The object to set up a function. (NotNull)
     */
    public HpSLCFunction<${myConditionBeanClassName}> scalar_LessEqual() {
        return xcreateSLCFunction(CK_LE, ${myConditionBeanClassName}.class);
    }

    @SuppressWarnings("unchecked")
    protected <CB extends ConditionBean> void xscalarCondition(String fn, SubQuery<CB> sq, String rd, HpSLCCustomized<CB> cs, ScalarConditionOption op) {
        assertObjectNotNull("subQuery", sq);
        ${myConditionBeanClassName} cb = xcreateScalarConditionCB(); sq.query((CB)cb);
        String pp = keepScalarCondition(cb.query()); // for saving query-value
        cs.setPartitionByCBean((CB)xcreateScalarConditionPartitionByCB()); // for using partition-by
        registerScalarCondition(fn, cb.query(), pp, rd, cs, op);
    }
    public abstract String keepScalarCondition(${myConditionQueryClassName} sq);

    protected ${myConditionBeanClassName} xcreateScalarConditionCB() {
        ${myConditionBeanClassName} cb = newMyCB(); cb.xsetupForScalarCondition(this); return cb;
    }

    protected ${myConditionBeanClassName} xcreateScalarConditionPartitionByCB() {
        ${myConditionBeanClassName} cb = newMyCB(); cb.xsetupForScalarConditionPartitionBy(this); return cb;
    }
#end
#if ($table.hasSinglePrimaryKey())
#if ($table.isAvailableMyselfMyselfDerived())

    // ===================================================================================
    //                                                                       MyselfDerived
    //                                                                       =============
    public void xsmyselfDerive(String fn, SubQuery<${myConditionBeanClassName}> sq, String al, DerivedReferrerOption op) {
        assertObjectNotNull("subQuery", sq);
        ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); cb.xsetupForDerivedReferrer(this);
        lockCall(() -> sq.query(cb)); String pp = keepSpecifyMyselfDerived(cb.query()); String pk = "${table.primaryKeyAsOne.name}";
        registerSpecifyMyselfDerived(fn, cb.query(), pk, pk, pp, "myselfDerived", al, op);
    }
    public abstract String keepSpecifyMyselfDerived(${myConditionQueryClassName} sq);

    /**
     * Prepare for (Query)MyselfDerived (correlated sub-query).
     * @return The object to set up a function for myself table. (NotNull)
     */
    public HpQDRFunction<${myConditionBeanClassName}> myselfDerived() {
        return xcreateQDRFunctionMyselfDerived(${myConditionBeanClassName}.class);
    }
    @SuppressWarnings("unchecked")
    protected <CB extends ConditionBean> void xqderiveMyselfDerived(String fn, SubQuery<CB> sq, String rd, Object vl, DerivedReferrerOption op) {
        assertObjectNotNull("subQuery", sq);
        ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); cb.xsetupForDerivedReferrer(this); sq.query((CB)cb);
        String pk = "${table.primaryKeyAsOne.name}";
        String sqpp = keepQueryMyselfDerived(cb.query()); // for saving query-value.
        String prpp = keepQueryMyselfDerivedParameter(vl);
        registerQueryMyselfDerived(fn, cb.query(), pk, pk, sqpp, "myselfDerived", rd, vl, prpp, op);
    }
    public abstract String keepQueryMyselfDerived(${myConditionQueryClassName} sq);
    public abstract String keepQueryMyselfDerivedParameter(Object vl);
#end
#if ($table.isAvailableMyselfMyselfExists())

    // ===================================================================================
    //                                                                        MyselfExists
    //                                                                        ============
    /**
     * Prepare for MyselfExists (correlated sub-query).
     * @param subCBLambda The implementation of sub-query. (NotNull)
     */
    public void myselfExists(SubQuery<${myConditionBeanClassName}> subCBLambda) {
        assertObjectNotNull("subCBLambda", subCBLambda);
        ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); cb.xsetupForMyselfExists(this);
        lockCall(() -> subCBLambda.query(cb)); String pp = keepMyselfExists(cb.query());
        registerMyselfExists(cb.query(), pp);
    }
    public abstract String keepMyselfExists(${myConditionQueryClassName} sq);
#end
#end
#if ($database.isAvailableDatabaseDependency())
#if ($database.isDatabaseMySQL())

    // ===================================================================================
    //                                                                    Full Text Search
    //                                                                    ================
    /**
     * Match for full-text search. <br>
     * Bind variable is unused because the condition value should be literal in MySQL.
     * @param textColumn The text column. (NotNull, StringColumn, TargetTableColumn)
     * @param conditionValue The condition value embedded without binding (by MySQL restriction) but escaped. (NullAllowed: if null or empty, no condition)
     * @param modifier The modifier of full-text search. (NullAllowed: If the value is null, No modifier specified)
     */
    public void match(org.dbflute.dbmeta.info.ColumnInfo textColumn
                    , String conditionValue
                    , org.dbflute.dbway.WayOfMySQL.FullTextSearchModifier modifier) {
        assertObjectNotNull("textColumn", textColumn);
        match(newArrayList(textColumn), conditionValue, modifier);
    }

    /**
     * Match for full-text search. <br>
     * Bind variable is unused because the condition value should be literal in MySQL.
     * @param textColumnList The list of text column. (NotNull, NotEmpty, StringColumn, TargetTableColumn)
     * @param conditionValue The condition value embedded without binding (by MySQL restriction) but escaped. (NullAllowed: if null or empty, no condition)
     * @param modifier The modifier of full-text search. (NullAllowed: If the value is null, no modifier specified)
     */
    public void match(List<org.dbflute.dbmeta.info.ColumnInfo> textColumnList
                    , String conditionValue
                    , org.dbflute.dbway.WayOfMySQL.FullTextSearchModifier modifier) {
        xdoMatchForMySQL(textColumnList, conditionValue, modifier);
    }
#end
#if ($database.isDatabasePostgreSQL())

    // ===================================================================================
    //                                                                    Full Text Search
    //                                                                    ================
    /**
     * Match for full-text search. <br>
     * @param textColumn The text column. (NotNull, StringColumn, TargetTableColumn)
     * @param conditionValue The condition value. (NullAllowed: if null or empty, no condition)
     */
    public void match(org.dbflute.dbmeta.info.ColumnInfo textColumn, String conditionValue) {
        assertObjectNotNull("textColumn", textColumn);
        match(newArrayList(textColumn), conditionValue);
    }

    /**
     * Match for full-text search. <br>
     * @param textColumnList The list of text column. (NotNull, NotEmpty, StringColumn, TargetTableColumn)
     * @param conditionValue The condition value. (NullAllowed: if null or empty, no condition)
     */
    public void match(List<org.dbflute.dbmeta.info.ColumnInfo> textColumnList, String conditionValue) {
        xdoMatchByLikeSearch(textColumnList, conditionValue);
    }

    @Override
    protected String xescapeFullTextSearchValue(String conditionValue) {
        return conditionValue; // non escape
    }

    @Override
    protected LikeSearchOption xcreateMatchLikeSearch() {
        return new PostgreSQLMatchLikeSearch();
    }

    @Override
    protected org.dbflute.dbway.ExtensionOperand xgetPostgreSQLMatchOperand() {
        return ${glDBFluteConfig}.getInstance().getFullTextSearchOperand();
    }
#end
#if ($database.isDatabaseOracle())

    // ===================================================================================
    //                                                                    Full Text Search
    //                                                                    ================
    /**
     * Match for full-text search. <br>
     * @param textColumn The text column. (NotNull, StringColumn, TargetTableColumn)
     * @param conditionValue The condition value. (NullAllowed: if null or empty, no condition)
     */
    public void match(org.dbflute.dbmeta.info.ColumnInfo textColumn, String conditionValue) {
        assertObjectNotNull("textColumn", textColumn);
        match(newArrayList(textColumn), conditionValue);
    }

    /**
     * Match for full-text search. <br>
     * The specified condition value is escaped in this method automatically.
     * @param textColumnList The list of text column. (NotNull, NotEmpty, StringColumn, TargetTableColumn)
     * @param conditionValue The condition value. (NullAllowed: if null or empty, no condition)
     */
    public void match(List<org.dbflute.dbmeta.info.ColumnInfo> textColumnList, String conditionValue) {
        xdoMatchByLikeSearch(textColumnList, conditionValue);
    }

    @Override
    protected String xescapeFullTextSearchValue(String conditionValue) {
        return xescapeOracleFullTextSearchValue(conditionValue);
    }

    @Override
    protected LikeSearchOption xcreateMatchLikeSearch() {
        return new OracleMatchLikeSearch();
    }
#end
#end

    // ===================================================================================
    //                                                                        Manual Order
    //                                                                        ============
#if ($table.isMakeCallbackConditionManualOrder())
    /**
     * Order along manual ordering information.
     * <pre>
     * cb.query().addOrderBy_Birthdate_Asc().<span style="color: #CC4747">withManualOrder</span>(<span style="color: #553000">op</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">op</span>.<span style="color: #CC4747">when_GreaterEqual</span>(priorityDate); <span style="color: #3F7E5E">// e.g. 2000/01/01</span>
     * });
     * <span style="color: #3F7E5E">// order by </span>
     * <span style="color: #3F7E5E">//   case</span>
     * <span style="color: #3F7E5E">//     when BIRTHDATE &gt;= '2000/01/01' then 0</span>
     * <span style="color: #3F7E5E">//     else 1</span>
     * <span style="color: #3F7E5E">//   end asc, ...</span>
     *
     * cb.query().addOrderBy_MemberStatusCode_Asc().<span style="color: #CC4747">withManualOrder</span>(<span style="color: #553000">op</span> <span style="color: #90226C; font-weight: bold"><span style="font-size: 120%">-</span>&gt;</span> {
     *     <span style="color: #553000">op</span>.<span style="color: #CC4747">when_Equal</span>(CDef.MemberStatus.Withdrawal);
     *     <span style="color: #553000">op</span>.<span style="color: #CC4747">when_Equal</span>(CDef.MemberStatus.Formalized);
     *     <span style="color: #553000">op</span>.<span style="color: #CC4747">when_Equal</span>(CDef.MemberStatus.Provisional);
     * });
     * <span style="color: #3F7E5E">// order by </span>
     * <span style="color: #3F7E5E">//   case</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'WDL' then 0</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'FML' then 1</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'PRV' then 2</span>
     * <span style="color: #3F7E5E">//     else 3</span>
     * <span style="color: #3F7E5E">//   end asc, ...</span>
     * </pre>
     * <p>This function with Union is unsupported!</p>
     * <p>The order values are bound (treated as bind parameter).</p>
     * @param opLambda The callback for option of manual-order containing order values. (NotNull)
     */
    public void withManualOrder(ManualOrderOptionCall opLambda) { // is user public!
        xdoWithManualOrder(cMOO(opLambda));
    }

#end
#if ($table.isMakeDirectConditionManualOrder())
    /**
     * Order along manual ordering information.
     * <pre>
     * ManualOrderOption mop = new ManualOrderOption();
     * mop.<span style="color: #CC4747">when_GreaterEqual</span>(priorityDate); <span style="color: #3F7E5E">// e.g. 2000/01/01</span>
     * cb.query().addOrderBy_Birthdate_Asc().<span style="color: #CC4747">withManualOrder(mop)</span>;
     * <span style="color: #3F7E5E">// order by </span>
     * <span style="color: #3F7E5E">//   case</span>
     * <span style="color: #3F7E5E">//     when BIRTHDATE &gt;= '2000/01/01' then 0</span>
     * <span style="color: #3F7E5E">//     else 1</span>
     * <span style="color: #3F7E5E">//   end asc, ...</span>
     *
     * ManualOrderOption mop = new ManualOrderOption();
     * mop.<span style="color: #CC4747">when_Equal</span>(CDef.MemberStatus.Withdrawal);
     * mop.<span style="color: #CC4747">when_Equal</span>(CDef.MemberStatus.Formalized);
     * mop.<span style="color: #CC4747">when_Equal</span>(CDef.MemberStatus.Provisional);
     * cb.query().addOrderBy_MemberStatusCode_Asc().<span style="color: #CC4747">withManualOrder(mop)</span>;
     * <span style="color: #3F7E5E">// order by </span>
     * <span style="color: #3F7E5E">//   case</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'WDL' then 0</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'FML' then 1</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'PRV' then 2</span>
     * <span style="color: #3F7E5E">//     else 3</span>
     * <span style="color: #3F7E5E">//   end asc, ...</span>
     * </pre>
     * <p>This function with Union is unsupported!</p>
     * <p>The order values are bound (treated as bind parameter).</p>
     * @param option The option of manual-order containing order values. (NotNull)
     */
    public void withManualOrder(ManualOrderOption option) { // is user public!
        xdoWithManualOrder(option);
    }

#end
    // ===================================================================================
    //                                                                    Small Adjustment
    //                                                                    ================
#if ($table.isMakeConditionQueryPlainListManualOrder())
    /**
     * Order along the list of manual values. #beforejava8 <br>
     * This function with Union is unsupported! <br>
     * The order values are bound (treated as bind parameter).
     * <pre>
     * MemberCB cb = new MemberCB();
     * List&lt;CDef.MemberStatus&gt; orderValueList = new ArrayList&lt;CDef.MemberStatus&gt;();
     * orderValueList.add(CDef.MemberStatus.Withdrawal);
     * orderValueList.add(CDef.MemberStatus.Formalized);
     * orderValueList.add(CDef.MemberStatus.Provisional);
     * cb.query().addOrderBy_MemberStatusCode_Asc().<span style="color: #CC4747">withManualOrder(orderValueList)</span>;
     * <span style="color: #3F7E5E">// order by </span>
     * <span style="color: #3F7E5E">//   case</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'WDL' then 0</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'FML' then 1</span>
     * <span style="color: #3F7E5E">//     when MEMBER_STATUS_CODE = 'PRV' then 2</span>
     * <span style="color: #3F7E5E">//     else 3</span>
     * <span style="color: #3F7E5E">//   end asc, ...</span>
     * </pre>
     * @param orderValueList The list of order values for manual ordering. (NotNull)
     */
    public void withManualOrder(List<? extends Object> orderValueList) { // is user public!
        assertObjectNotNull("withManualOrder(orderValueList)", orderValueList);
        final ManualOrderOption option = new ManualOrderOption();
        option.acceptOrderValueList(orderValueList);
        withManualOrder(option);
    }

#end
#if ($table.isCompatibleConditionBeanFromToOneSideAllowed())
    @Override
    protected void filterFromToOption(String columnDbName, FromToOption option) {
        option.allowOneSide();
    }

#end
    // ===================================================================================
    //                                                                       Very Internal
    //                                                                       =============
    protected ${myConditionBeanClassName} newMyCB() {
        return new ${myConditionBeanClassName}();
    }
    // very internal (for suppressing warn about 'Not Use Import')
    protected String xabUDT() { return Date.class.getName(); }
    protected String xabCQ() { return ${myConditionQueryClassName}.class.getName(); }
    protected String xabLSO() { return LikeSearchOption.class.getName(); }
    protected String xabSLCS() { return HpSLCSetupper.class.getName(); }
    protected String xabSCP() { return SubQuery.class.getName(); }
#if ($database.isDatabaseMSAccess())
    @Override
    protected boolean xsuppressEscape() { return true; } // bacause MS-Access does not support escape
#end
}
