##
## Copyright 2014-2021 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCommon};

import java.util.*;

import org.dbflute.exception.ClassificationNotFoundException;
import org.dbflute.jdbc.Classification;
import org.dbflute.jdbc.ClassificationCodeType;
import org.dbflute.jdbc.ClassificationMeta;
import org.dbflute.jdbc.ClassificationUndefinedHandlingType;
import org.dbflute.optional.OptionalThing;

/**
 * The definition of classification.
 * @author ${database.classAuthor}
 */
public interface ${glCDef} extends Classification {

#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
#if ($classificationTop.hasTopComment())
    /**
     * ${classificationTop.topCommentForJavaDoc}
     */
#end
#if ($classificationTop.isDeprecated())
    @Deprecated
#end
    public enum ${classificationName} implements ${glCDef} {
#set ($index = 0)
#foreach ($classificationElement in $classificationTop.classificationElementList)
        /** $database.buildClassificationApplicationCommentForJavaDoc($classificationElement) */
#if ($classificationElement.isDeprecated())
        @Deprecated
#end
#set ($rearCommna = "")
#if ($index < $classificationTop.classificationElementList.size() - 1)
#set ($rearCommna = ",")
#else
#set ($rearCommna = ";")
#end
#if ($classificationTop.hasSisterCode())
        ${classificationElement.name}($classificationElement.buildClassificationCodeAliasSisterCodeVariables())${rearCommna}
#else
        ${classificationElement.name}($classificationElement.buildClassificationCodeAliasVariables())${rearCommna}
#end
#set ($index = $index + 1)
#end
        private static ZzzoneSlimmer<${classificationName}> _slimmer = new ZzzoneSlimmer<>(${classificationName}.class, values());
#if ($database.hasClassificationSubItemMap($classificationName))
        private static final Map<String, Map<String, Object>> _subItemMapMap = new HashMap<String, Map<String, Object>>();
        static {
#foreach ($classificationElement in $classificationTop.classificationElementList)
#set ($subItemMap = $classificationElement.subItemMap)
            {
                Map<String, Object> subItemMap = new HashMap<String, Object>();
#foreach ($entry in $subItemMap.entrySet())
#if ($entry.value != "null")
                subItemMap.put("${entry.key}", "${entry.value}");
#else
                subItemMap.put("${entry.key}", null);
#end
#end
                _subItemMapMap.put(${classificationElement.name}.code(), Collections.unmodifiableMap(subItemMap));
            }
#end
        }
#end
#if ($classificationTop.hasSisterCode())
        private String _code; private String _alias; private Set<String> _sisterSet;
        private ${classificationName}(String code, String alias, String[] sisters)
        { _code = code; _alias = alias; _sisterSet = ZzzoneSlimmer.toSisterSet(sisters); }
#else
        private String _code; private String _alias;
        private ${classificationName}(String code, String alias) { _code = code; _alias = alias; }
#end
        public String code() { return _code; } public String alias() { return _alias; }
#if ($classificationTop.hasSisterCode())
        public Set<String> sisterSet() { return _sisterSet; }
#else
        public Set<String> sisterSet() { return Collections.emptySet(); }
#end
#if ($database.hasClassificationSubItemMap($classificationName))
        public Map<String, Object> subItemMap() { return _subItemMapMap.get(code()); }
#else
        public Map<String, Object> subItemMap() { return Collections.emptyMap(); }
#end
        public ClassificationMeta meta() { return ${glCDef}.DefMeta.${classificationName}; }
#foreach ($regularSubItem in $classificationTop.regularSubItemList)
#set ($subItemMap = $classificationElement.subItemMap)
#set ($subItemType = "Object")
#if ($regularSubItem.isSubItemTypeString())
#set ($subItemType = "String")
#end
        public ${subItemType} ${regularSubItem.subItemName}() {
#if ($regularSubItem.isSubItemTypeObject())
            return subItemMap().get("${regularSubItem.subItemName}");
#else
            return (${subItemType})subItemMap().get("${regularSubItem.subItemName}");
#end
        }
#end
#foreach ($group in $classificationTop.groupList)
        /**
         * Is the classification in the group? <br>
#if ($group.hasGroupComment())
         * ${group.groupCommentForJavaDocNest} <br>
#end
         * ${group.buildElementDisp()}
         * @return The determination, true or false.
         */
        public boolean is${group.groupNameInitCap}() { return ${group.buildReturnExpThis()}; }
#end
#if ($classificationTop.hasGroup())
        public boolean inGroup(String groupName) {
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equals(groupName)) { return is${group.groupNameInitCap}(); }
#end
            return false;
        }
#else
        public boolean inGroup(String groupName) { return false; }
#end
        /**
         * Get the classification of the code. (CaseInsensitive)
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns empty)
         * @return The optional classification corresponding to the code. (NotNull, EmptyAllowed: if not found, returns empty)
         */
        public static OptionalThing<${classificationName}> of(Object code) { return _slimmer.of(code); }
        /**
         * Find the classification by the name. (CaseInsensitive)
         * @param name The string of name, which is case-insensitive. (NotNull)
         * @return The optional classification corresponding to the name. (NotNull, EmptyAllowed: if not found, returns empty)
         */
        public static OptionalThing<${classificationName}> byName(String name) { return _slimmer.byName(name); }
        /**
         * <span style="color: #AD4747; font-size: 120%">Old style so use of(code).</span> <br>
         * Get the classification by the code. (CaseInsensitive)
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the code. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} codeOf(Object code) { return _slimmer.codeOf(code); }
        /**
         * <span style="color: #AD4747; font-size: 120%">Old style so use byName(name).</span> <br>
         * Get the classification by the name (also called 'value' in ENUM world).
         * @param name The string of name, which is case-sensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the name. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} nameOf(String name) { return _slimmer.nameOf(name, nm -> valueOf(nm)); }
        /**
         * Get the list of all classification elements. (returns new copied list)
         * @return The snapshot list of all classification elements. (NotNull)
         */
        public static List<${classificationName}> listAll() { return _slimmer.listAll(values()); }
        /**
         * Get the list of classification elements in the specified group. (returns new copied list) <br>
         * @param groupName The string of group name, which is case-insensitive. (NotNull)
         * @return The snapshot list of classification elements in the group. (NotNull, EmptyAllowed: if not found, throws exception)
         */
        public static List<${classificationName}> listByGroup(String groupName) {
            if (groupName == null) { throw new IllegalArgumentException("The argument 'groupName' should not be null."); }
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equalsIgnoreCase(groupName)) { return listOf${group.groupNameInitCap}(); }
#end
            throw new ClassificationNotFoundException("Unknown classification group: ${classificationName}." + groupName);
        }
        /**
         * Get the list of classification elements corresponding to the specified codes. (returns new copied list) <br>
         * @param codeList The list of plain code, which is case-insensitive. (NotNull)
         * @return The snapshot list of classification elements in the code list. (NotNull, EmptyAllowed: when empty specified)
         */
        public static List<${classificationName}> listOf(Collection<String> codeList) { return _slimmer.listOf(codeList); }
#foreach ($group in $classificationTop.groupList)
        /**
         * Get the list of group classification elements. (returns new copied list) <br>
#if ($group.hasGroupComment())
         * ${group.groupCommentForJavaDocNest} <br>
#end
         * ${group.buildElementDisp()}
         * @return The snapshot list of classification elements in the group. (NotNull)
         */
        public static List<${classificationName}> listOf${group.groupNameInitCap}() {
            return new ArrayList<${classificationName}>(Arrays.asList(${group.buildCDefArgExp()}));
        }
#end
        /**
         * Get the list of classification elements in the specified group. (returns new copied list) <br>
         * @param groupName The string of group name, which is case-sensitive. (NullAllowed: if null, returns empty list)
         * @return The snapshot list of classification elements in the group. (NotNull, EmptyAllowed: if the group is not found)
         */
#if ($classificationTop.hasGroup())
        public static List<${classificationName}> groupOf(String groupName) {
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equals(groupName)) { return listOf${group.groupNameInitCap}(); }
#end
            return new ArrayList<${classificationName}>();
        }
#else
        public static List<${classificationName}> groupOf(String groupName) { return new ArrayList<${classificationName}>(); }
#end
        @Override public String toString() { return code(); }
    }

#end
    public enum DefMeta implements ClassificationMeta {
#set ($index = 0)
#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
#if ($classificationTop.hasTopComment())
        /** ${classificationTop.topCommentForJavaDocNest} */
#end
#set ($rearCommna = "")
#if ($index < $database.classificationNameList.size() - 1)
#set ($rearCommna = ",")
#else
#set ($rearCommna = ";")
#end
        ${classificationName}${rearCommna}
#set ($index = $index + 1)
#end
        public String classificationName() {
            return name(); // same as definition name
        }

        public OptionalThing<? extends Classification> of(Object code) {
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return ${glCDef}.${classificationName}.of(code); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public OptionalThing<? extends Classification> byName(String name) {
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return ${glCDef}.${classificationName}.byName(name); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public Classification codeOf(Object code) { // null if not found, old style so use of(code)
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return ${glCDef}.${classificationName}.codeOf(code); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public Classification nameOf(String name) { // null if not found, old style so use byName(name)
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return ${glCDef}.${classificationName}.valueOf(name); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public List<Classification> listAll() {
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return toClsList(${glCDef}.${classificationName}.listAll()); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public List<Classification> listByGroup(String groupName) { // exception if not found
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return toClsList(${glCDef}.${classificationName}.listByGroup(groupName)); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public List<Classification> listOf(Collection<String> codeList) {
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return toClsList(${glCDef}.${classificationName}.listOf(codeList)); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public List<Classification> groupOf(String groupName) { // old style
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName})) { return toClsList(${glCDef}.${classificationName}.groupOf(groupName)); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        @SuppressWarnings("unchecked")
        private List<Classification> toClsList(List<?> clsList) {
            return (List<Classification>)clsList;
        }

        public ClassificationCodeType codeType() {
#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
#if ($classificationTop.hasCodeType())
            if (is(${classificationName})) { return ClassificationCodeType.${classificationTop.codeType}; }
#end
#end
            return ClassificationCodeType.String; // as default
        }

        public ClassificationUndefinedHandlingType undefinedHandlingType() {
#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
            if (is(${classificationName})) { return ClassificationUndefinedHandlingType.${classificationTop.undefinedHandlingType}; }
#end
            return ClassificationUndefinedHandlingType.LOGGING; // as default
        }

        public static OptionalThing<${glCDef}.DefMeta> find(String classificationName) { // instead of valueOf()
            if (classificationName == null) { throw new IllegalArgumentException("The argument 'classificationName' should not be null."); }
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName}, classificationName)) { return OptionalThing.of(${classificationName}); }
#end
            return OptionalThing.ofNullable(null, () -> {
                throw new ClassificationNotFoundException("Unknown classification: " + classificationName);
            });
        }

        public static ${glCDef}.DefMeta meta(String classificationName) { // old style so use find(name)
            if (classificationName == null) { throw new IllegalArgumentException("The argument 'classificationName' should not be null."); }
#foreach ($classificationName in $database.classificationNameList)
            if (is(${classificationName}, classificationName)) { return ${classificationName}; }
#end
            throw new IllegalStateException("Unknown classification: " + classificationName);
        }
#if (!$database.classificationNameList.isEmpty())

        private boolean is(DefMeta meta) {
            return meta.name().equals(name());
        }

        private static boolean is(DefMeta meta, String classificationName) {
            return meta.name().equalsIgnoreCase(classificationName);
        }
#end
    }

    public static class ZzzoneSlimmer<CLS extends ${glCDef}> {

        public static Set<String> toSisterSet(String[] sisters) { // used by initializer so static
            return Collections.unmodifiableSet(new LinkedHashSet<String>(Arrays.asList(sisters)));
        }

        private final Class<CLS> _clsType;
        private final Map<String, CLS> _codeClsMap = new HashMap<>();
        private final Map<String, CLS> _nameClsMap = new HashMap<>();

        public ZzzoneSlimmer(Class<CLS> clsType, CLS[] values) {
            _clsType = clsType;
            initMap(values);
        }

        private void initMap(CLS[] values) {
            for (CLS value : values) {
                _codeClsMap.put(value.code().toLowerCase(), value);
                for (String sister : value.sisterSet()) {
                    _codeClsMap.put(sister.toLowerCase(), value);
                }
                _nameClsMap.put(value.name().toLowerCase(), value);
            }
        }

        public OptionalThing<CLS> of(Object code) {
            if (code == null) {
                return OptionalThing.ofNullable(null, () -> {
                    throw new ClassificationNotFoundException("null code specified");
                });
            }
            if (_clsType.isAssignableFrom(code.getClass())) {
                @SuppressWarnings("unchecked")
                CLS cls = (CLS) code;
                return OptionalThing.of(cls);
            }
            if (code instanceof OptionalThing<?>) {
                @SuppressWarnings("unchecked")
                CLS cls = ((OptionalThing<CLS>) code).orElse(null);
                return of(cls.code());
            }
            return OptionalThing.ofNullable(_codeClsMap.get(code.toString().toLowerCase()), () -> {
                throw new ClassificationNotFoundException("Unknown classification code: " + code);
            });
        }

        public OptionalThing<CLS> byName(String name) {
            if (name == null) {
                throw new IllegalArgumentException("The argument 'name' should not be null.");
            }
            return OptionalThing.ofNullable(_nameClsMap.get(name.toLowerCase()), () -> {
                throw new ClassificationNotFoundException("Unknown classification name: " + name);
            });
        }

        public CLS codeOf(Object code) {
            if (code == null) {
                return null;
            }
            if (_clsType.isAssignableFrom(code.getClass())) {
                @SuppressWarnings("unchecked")
                CLS cls = (CLS) code;
                return cls;
            }
            return _codeClsMap.get(code.toString().toLowerCase());
        }

        public CLS nameOf(String name, java.util.function.Function<String, CLS> valueOfCall) {
            if (name == null) {
                return null;
            }
            try {
                return valueOfCall.apply(name);
            } catch (RuntimeException ignored) {
                return null;
            }
        }

        public List<CLS> listAll(CLS[] clss) {
            return new ArrayList<CLS>(Arrays.asList(clss));
        }

        public List<CLS> listOf(Collection<String> codeList) {
            if (codeList == null) {
                throw new IllegalArgumentException("The argument 'codeList' should not be null.");
            }
            List<CLS> clsList = new ArrayList<CLS>(codeList.size());
            for (String code : codeList) {
                clsList.add(of(code).get());
            }
            return clsList;
        }
    }
}
