##
## Copyright 2014-2020 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${request.buildHierarchyPackage($table)};

import org.lastaflute.core.mail.LaTypicalPostcard;
import org.lastaflute.core.mail.MPCall;
import org.lastaflute.core.mail.Postbox;

#set ($pluginDef = "")
#if ($request.tableMap.pluginInterface)
#set ($pluginDef = " implements ${request.tableMap.pluginInterface}")
#end
/**
 * The postcard for MailFlute on LastaFlute.
 * @author FreeGen
 */
public class ${table.className} extends LaTypicalPostcard${pluginDef} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    public static final String PATH = "${table.resourcePath}";

    // ===================================================================================
    //                                                                         Entry Point
    //                                                                         ===========
    public static ${table.className} droppedInto(Postbox postbox, MPCall<${table.className}> postcardLambda) {
        ${table.className} postcard = new ${table.className}();
        postcardLambda.write(postcard);
        postbox.post(postcard);
        return postcard;
    }

    // ===================================================================================
    //                                                                           Meta Data
    //                                                                           =========
    @Override
    protected String getBodyFile() {
        return PATH;
    }

    @Override
    protected String[] getPropertyNames() {
        return new String[] {${table.propertyNameCommaString}};
    }

    // ===================================================================================
    //                                                                    Postcard Request
    //                                                                    ================
    // -----------------------------------------------------
    //                                          Mail Address
    //                                          ------------
    public void setFrom(String from, String personal) {
        doSetFrom(from, personal);
    }

    public void addTo(String to) {
        doAddTo(to);
    }

    public void addTo(String to, String personal) {
        doAddTo(to, personal);
    }

    public void addCc(String cc) {
        doAddCc(cc);
    }

    public void addCc(String cc, String personal) {
        doAddCc(cc, personal);
    }

    public void addBcc(String bcc) {
        doAddBcc(bcc);
    }

    public void addBcc(String bcc, String personal) {
        doAddBcc(bcc, personal);
    }

    public void addReplyTo(String replyTo) {
        doAddReplyTo(replyTo);
    }

    public void addReplyTo(String replyTo, String personal) {
        doAddReplyTo(replyTo, personal);
    }
#set ($propertyIndex = 0)
#foreach ($property in $table.propertyList)

#if ($propertyIndex == 0)
    // -----------------------------------------------------
    //                                  Application Variable
    //                                  --------------------
#end
    /**
     * Set the value of ${property.uncapCalemName}, used in parameter comment. <br>
     * Even if empty string, treated as empty plainly. So "IF pmb != null" is false if empty.
     * @param ${property.uncapCalemName} The parameter value of ${property.uncapCalemName}. (NotNull)
     */
    public void set${property.capCalemName}(${property.propertyType} ${property.uncapCalemName}) {
        registerVariable("${property.propertyName}", ${property.uncapCalemName});
    }
#set ($propertyIndex = $propertyIndex + 1)
#end
}
