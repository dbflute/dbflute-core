##
## Copyright 2014-2023 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${request.package};

import java.util.*;
import java.util.function.Function;
import java.util.function.Supplier;

import org.dbflute.exception.ClassificationNotFoundException;
import org.dbflute.jdbc.Classification;
import org.dbflute.jdbc.ClassificationCodeType;
import org.dbflute.jdbc.ClassificationMeta;
import org.dbflute.jdbc.ClassificationUndefinedHandlingType;
import org.dbflute.optional.OptionalThing;
#if ($optionMap.hasRefCls && !$optionMap.isSuppressDBClsCollaboration)
#foreach ($referredCDefFqcn in $optionMap.importedReferredCDefFqcnList)
import ${referredCDefFqcn};
#end
#end

#set ($isMakeSimpleDeterminationMethod = $optionMap.isMakeSimpleDeterminationMethod)
#set ($isMakeCDefOldStyleCodeOfMethod = $optionMap.isMakeCDefOldStyleCodeOfMethod)
#set ($isMakeCDefOldStyleNameOfMethod = $optionMap.isMakeCDefOldStyleNameOfMethod)
#set ($isMakeCDefOldStyleListOfMethod = $optionMap.isMakeCDefOldStyleListOfMethod)
#set ($isMakeCDefOldStyleGroupOfMethod = $optionMap.isMakeCDefOldStyleGroupOfMethod)
#set ($glCDef = "${request.className}")
/**
 * The definition of ${optionMap.clsTitle} classification.
 * @author FreeGen
 */
public interface ${glCDef} extends Classification {

#foreach ($classificationTop in $optionMap.classificationTopList)
#set ($classificationName = $classificationTop.classificationName)
#if ($classificationTop.hasTopComment())
    /**
     * ${classificationTop.topCommentForJavaDoc}
     */
#end
#if ($classificationTop.isDeprecated())
    @Deprecated
#end
    public enum ${classificationName} implements ${glCDef} {
#set ($index = 0)
#foreach ($classificationElement in $classificationTop.classificationElementList)
        /** ${classificationElement.buildClassificationApplicationCommentForJavaDoc()} */
#if ($classificationElement.isDeprecated())
        @Deprecated
#end
#set ($rearCommna = "")
#if ($index < $classificationTop.classificationElementList.size() - 1)
#set ($rearCommna = ",")
#else
#set ($rearCommna = ";")
#end
#if ($classificationTop.hasSisterCode())
        ${classificationElement.name}($classificationElement.buildClassificationCodeAliasSisterCodeVariables())${rearCommna}
#else
        ${classificationElement.name}($classificationElement.buildClassificationCodeAliasVariables())${rearCommna}
#end
#set ($index = $index + 1)
#end
#if ($index == 0)
## for empty classification (needed as enum grammer)
        ;
#end
#if ($classificationTop.hasSisterEmpty())
        private static String[] emptyStrings() { return new String[0]; }
#end
        private static ZzzoneSlimmer<${classificationName}> _slimmer = new ZzzoneSlimmer<>(${classificationName}.class, values());
#if ($classificationTop.hasSubItem())
        private static final Map<String, Map<String, Object>> _subItemMapMap = new HashMap<String, Map<String, Object>>();
        static {
#foreach ($classificationElement in $classificationTop.classificationElementList)
#set ($subItemMap = $classificationElement.subItemMap)
            {
                Map<String, Object> subItemMap = new HashMap<String, Object>();
#foreach ($entry in $subItemMap.entrySet())
#if ($entry.value != "null")
                subItemMap.put("${entry.key}", "${entry.value}");
#else
                subItemMap.put("${entry.key}", null);
#end
#end
                _subItemMapMap.put(${classificationElement.name}.code(), Collections.unmodifiableMap(subItemMap));
            }
#end
        }
#end
#if ($classificationTop.hasSisterCode())
        private String _code; private String _alias; private Set<String> _sisterSet;
        private ${classificationName}(String code, String alias, String[] sisters)
        { _code = code; _alias = alias; _sisterSet = ZzzoneSlimmer.toSisterSet(sisters); }
#else
        private String _code; private String _alias;
        private ${classificationName}(String code, String alias) { _code = code; _alias = alias; }
#end
        public String code() { return _code; } public String alias() { return _alias; }
#if ($classificationTop.hasSisterCode())
        public Set<String> sisterSet() { return _sisterSet; }
#else
        public Set<String> sisterSet() { return Collections.emptySet(); }
#end
#if ($classificationTop.hasSubItem())
        public Map<String, Object> subItemMap() { return _subItemMapMap.get(code()); }
#else
        public Map<String, Object> subItemMap() { return Collections.emptyMap(); }
#end
        public ClassificationMeta meta() { return ${glCDef}.DefMeta.${classificationName}; }
#foreach ($regularSubItem in $classificationTop.regularSubItemList)
#set ($subItemMap = $classificationElement.subItemMap)
#set ($subItemType = "Object")
#if ($regularSubItem.isSubItemTypeString())
#set ($subItemType = "String")
#end
        public ${subItemType} ${regularSubItem.subItemName}() {
#if ($regularSubItem.isSubItemTypeObject())
            return subItemMap().get("${regularSubItem.subItemName}");
#else
            return (${subItemType})subItemMap().get("${regularSubItem.subItemName}");
#end
        }
#end
#if ($isMakeSimpleDeterminationMethod)
#foreach ($classificationElement in $classificationTop.classificationElementList)
        /**
         * Is the classification ${classificationElement.name}? <br>
#if ($classificationElement.hasCommentDisp())
         * ${classificationElement.commentForJavaDocNest} <br>
#end
         * @return The determination, true or false.
         */
#if ($classificationElement.isDeprecated())
        @Deprecated
#end
        public boolean is${classificationElement.name}() { return ${classificationElement.name}.equals(this); }
#end
#end
#foreach ($group in $classificationTop.groupList)
        /**
         * Is the classification in the group? <br>
#if ($group.hasGroupComment())
         * ${group.groupCommentForJavaDocNest} <br>
#end
         * ${group.buildElementDisp()}
         * @return The determination, true or false.
         */
        public boolean is${group.groupNameInitCap}() { return ${group.buildReturnExpThis()}; }
#end
#if ($classificationTop.hasGroup())
        public boolean inGroup(String groupName) {
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equalsIgnoreCase(groupName)) { return is${group.groupNameInitCap}(); }
#end
            return false;
        }
#else
        public boolean inGroup(String groupName) { return false; }
#end
        /**
         * Get the classification of the code. (CaseInsensitive)
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns empty)
         * @return The optional classification corresponding to the code. (NotNull, EmptyAllowed: if not found, returns empty)
         */
        public static OptionalThing<${classificationName}> of(Object code) { return _slimmer.of(code); }
        /**
         * Find the classification by the name. (CaseInsensitive)
         * @param name The string of name, which is case-insensitive. (NotNull)
         * @return The optional classification corresponding to the name. (NotNull, EmptyAllowed: if not found, returns empty)
         */
        public static OptionalThing<${classificationName}> byName(String name) { return _slimmer.byName(name); }
#if ($isMakeCDefOldStyleCodeOfMethod)
        /**
         * <span style="color: #AD4747; font-size: 120%">Old style so use of(code).</span>
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the code. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} codeOf(Object code) { return _slimmer.codeOf(code); }
#end
#if ($isMakeCDefOldStyleNameOfMethod)
        /**
         * <span style="color: #AD4747; font-size: 120%">Old style so use byName(name).</span>
         * @param name The string of name, which is case-sensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the name. (NullAllowed: if not found, returns null)
         * @deprecated use byName(name) instead.
         */
        @Deprecated
        public static ${classificationName} nameOf(String name) { return _slimmer.nameOf(name, nm -> valueOf(nm)); }
#end
        /**
         * Get the list of all classification elements. (returns new copied list)
         * @return The snapshot list of all classification elements. (NotNull)
         */
        public static List<${classificationName}> listAll() { return _slimmer.listAll(values()); }
        /**
         * Get the list of classification elements in the specified group. (returns new copied list)
         * @param groupName The string of group name, which is case-insensitive. (NotNull)
         * @return The snapshot list of classification elements in the group. (NotNull)
         * @throws ClassificationNotFoundException When the group is not found.
         */
        public static List<${classificationName}> listByGroup(String groupName) {
            if (groupName == null) { throw new IllegalArgumentException("The argument 'groupName' should not be null."); }
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equalsIgnoreCase(groupName)) { return listOf${group.groupNameInitCap}(); }
#end
            throw new ClassificationNotFoundException("Unknown classification group: ${classificationName}." + groupName);
        }
#if ($isMakeCDefOldStyleListOfMethod)
        /**
         * <span style="color: #AD4747; font-size: 120%">Old style so use e.g. Stream API with of().</span>
         * @param codeList The list of plain code, which is case-insensitive. (NotNull)
         * @return The snapshot list of classification elements in the code list. (NotNull, EmptyAllowed: when empty specified)
         * @deprecated use e.g. Stream API with of() instead.
         */
        @Deprecated
        public static List<${classificationName}> listOf(Collection<String> codeList) { return _slimmer.listOf(codeList); }
#end
#foreach ($group in $classificationTop.groupList)
        /**
         * Get the list of group classification elements. (returns new copied list) <br>
#if ($group.hasGroupComment())
         * ${group.groupCommentForJavaDocNest} <br>
#end
         * ${group.buildElementDisp()}
         * @return The snapshot list of classification elements in the group. (NotNull)
         */
        public static List<${classificationName}> listOf${group.groupNameInitCap}() {
            return new ArrayList<>(Arrays.asList(${group.buildCDefArgExp()}));
        }
#end
#if ($isMakeCDefOldStyleGroupOfMethod)
        /**
         * <span style="color: #AD4747; font-size: 120%">Old style so use listByGroup(groupName).</span>
         * @param groupName The string of group name, which is case-sensitive. (NullAllowed: if null, returns empty list)
         * @return The snapshot list of classification elements in the group. (NotNull, EmptyAllowed: if the group is not found)
         * @deprecated use listByGroup(groupName) instead.
         */
        @Deprecated
#if ($classificationTop.hasGroup())
        public static List<${classificationName}> groupOf(String groupName) {
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equalsIgnoreCase(groupName)) { return listOf${group.groupNameInitCap}(); }
#end
            return new ArrayList<>();
        }
#else
        public static List<${classificationName}> groupOf(String groupName) { return new ArrayList<>(); }
#end
#end
#if (!$optionMap.isSuppressDBClsCollaboration)
#foreach ($refClsElement in $classificationTop.refClsElementList)
        /**
         * @param refCls The ${refClsElement.collaborationAdjective} classification to find. (NullAllowed: if null, returns empty)
         * @return The the app classification corresponding to the DB classification. (NotNull, EmptyAllowed: when null specified, not found)
         */
        public static OptionalThing<${classificationName}> from${refClsElement.collaborationWord}Cls(${refClsElement.referredCDefType} refCls) {
            String refCode = refCls != null ? refCls.code() : null;
            return OptionalThing.ofNullable(of(refCode).orElse(null), () -> {
                throw new IllegalStateException("Cannot convert ${refClsElement.referredCDefType} to ${classificationName} by the referred code: " + refCode);
            });
        }
        /**
         * @return The ${refClsElement.collaborationAdjective} classification corresponding to the app classification. (NotNull, EmptyAllowed: when no-related to DB)
         */
        public OptionalThing<${refClsElement.referredCDefType}> to${refClsElement.collaborationWord}Cls() {
            String appCode = code();
            return OptionalThing.ofNullable(${refClsElement.referredCDefType}.of(appCode).orElse(null), () -> {
                throw new IllegalStateException("Cannot convert ${classificationName} to ${refClsElement.classificationName} by the app code: " + appCode);
            });
        }
#end
#end
        @Override public String toString() { return code(); }
    }

#end
    public enum DefMeta implements ClassificationMeta {
#set ($index = 0)
#foreach ($classificationTop in $optionMap.classificationTopList)
#set ($classificationName = $classificationTop.classificationName)
#if ($classificationTop.hasTopComment())
        /** ${classificationTop.topCommentForJavaDocNest} */
#end
#set ($rearCommna = "")
#if ($index < $optionMap.classificationTopList.size() - 1)
#set ($rearCommna = ",")
#else
#set ($rearCommna = ";")
#end
        ${classificationName}(cd -> ${glCDef}.${classificationName}.of(cd), nm -> ${glCDef}.${classificationName}.byName(nm)
        , () -> ${glCDef}.${classificationName}.listAll(), gp -> ${glCDef}.${classificationName}.listByGroup(gp)
        , ClassificationCodeType.${classificationTop.codeType}, ClassificationUndefinedHandlingType.${classificationTop.undefinedHandlingType})${rearCommna}

#set ($index = $index + 1)
#end
#if ($index == 0)
## for empty CDef (needed as enum grammer)
        ;
#end
        private static final Map<String, DefMeta> _nameMetaMap = new HashMap<>();
        static {
            for (DefMeta value : values()) {
                _nameMetaMap.put(value.name().toLowerCase(), value);
            }
        }
        private final Function<Object, OptionalThing<? extends Classification>> _ofCall;
        private final Function<String, OptionalThing<? extends Classification>> _byNameCall;
        private final Supplier<List<? extends Classification>> _listAllCall;
        private final Function<String, List<? extends Classification>> _listByGroupCall;
        private final ClassificationCodeType _codeType;
        private final ClassificationUndefinedHandlingType _undefinedHandlingType;
        private DefMeta(Function<Object, OptionalThing<? extends Classification>> ofCall
                      , Function<String, OptionalThing<? extends Classification>> byNameCall
                      , Supplier<List<? extends Classification>> listAllCall
                      , Function<String, List<? extends Classification>> listByGroupCall
                      , ClassificationCodeType codeType
                      , ClassificationUndefinedHandlingType undefinedHandlingType
                ) {
            _ofCall = ofCall;
            _byNameCall = byNameCall;
            _listAllCall = listAllCall;
            _listByGroupCall = listByGroupCall;
            _codeType = codeType;
            _undefinedHandlingType = undefinedHandlingType;
        }
        public String classificationName() { return name(); } // same as definition name

        public OptionalThing<? extends Classification> of(Object code) { return _ofCall.apply(code); }
        public OptionalThing<? extends Classification> byName(String name) { return _byNameCall.apply(name); }

        public Classification codeOf(Object code) // null allowed, old style
        { return of(code).orElse(null); }
        public Classification nameOf(String name) { // null allowed, old style
            if (name == null) { return null; } // for compatible
            return byName(name).orElse(null); // case insensitive
        }

        public List<Classification> listAll()
        { return toClsList(_listAllCall.get()); }
        public List<Classification> listByGroup(String groupName) // exception if not found
        { return toClsList(_listByGroupCall.apply(groupName)); }

        @SuppressWarnings("unchecked")
        private List<Classification> toClsList(List<?> clsList) { return (List<Classification>)clsList; }

        public List<Classification> listOf(Collection<String> codeList) { // copied from slimmer, old style
            if (codeList == null) {
                throw new IllegalArgumentException("The argument 'codeList' should not be null.");
            }
            List<Classification> clsList = new ArrayList<>(codeList.size());
            for (String code : codeList) {
                clsList.add(of(code).get());
            }
            return clsList;
        }
        public List<Classification> groupOf(String groupName) { // empty if not found, old style
            try {
                return listByGroup(groupName); // case insensitive
            } catch (IllegalArgumentException | ClassificationNotFoundException e) {
                return new ArrayList<>();
            }
        }

        public ClassificationCodeType codeType() { return _codeType; }
        public ClassificationUndefinedHandlingType undefinedHandlingType() { return _undefinedHandlingType; }

        public static OptionalThing<${glCDef}.DefMeta> find(String classificationName) { // instead of valueOf()
            if (classificationName == null) { throw new IllegalArgumentException("The argument 'classificationName' should not be null."); }
            return OptionalThing.ofNullable(_nameMetaMap.get(classificationName.toLowerCase()), () -> {
                throw new ClassificationNotFoundException("Unknown classification: " + classificationName);
            });
        }
        public static ${glCDef}.DefMeta meta(String classificationName) { // old style so use find(name)
            return find(classificationName).orElseTranslatingThrow(cause -> {
                return new IllegalStateException("Unknown classification: " + classificationName);
            });
        }
    }

    public static class ZzzoneSlimmer<CLS extends ${glCDef}> {

        public static Set<String> toSisterSet(String[] sisters) { // used by initializer so static
            return Collections.unmodifiableSet(new LinkedHashSet<String>(Arrays.asList(sisters)));
        }

        private final Class<CLS> _clsType;
        private final Map<String, CLS> _codeClsMap = new HashMap<>();
        private final Map<String, CLS> _nameClsMap = new HashMap<>();

        public ZzzoneSlimmer(Class<CLS> clsType, CLS[] values) {
            _clsType = clsType;
            initMap(values);
        }

        private void initMap(CLS[] values) {
            for (CLS value : values) {
                _codeClsMap.put(value.code().toLowerCase(), value);
                for (String sister : value.sisterSet()) {
                    _codeClsMap.put(sister.toLowerCase(), value);
                }
                _nameClsMap.put(value.name().toLowerCase(), value);
            }
        }

        public OptionalThing<CLS> of(Object code) {
            if (code == null) {
                return OptionalThing.ofNullable(null, () -> {
                    throw new ClassificationNotFoundException("null code specified");
                });
            }
            if (_clsType.isAssignableFrom(code.getClass())) {
                @SuppressWarnings("unchecked")
                CLS cls = (CLS) code;
                return OptionalThing.of(cls);
            }
            if (code instanceof OptionalThing<?>) {
                return of(((OptionalThing<?>) code).orElse(null));
            }
            return OptionalThing.ofNullable(_codeClsMap.get(code.toString().toLowerCase()), () -> {
                throw new ClassificationNotFoundException("Unknown classification code: " + code);
            });
        }

        public OptionalThing<CLS> byName(String name) {
            if (name == null) {
                throw new IllegalArgumentException("The argument 'name' should not be null.");
            }
            return OptionalThing.ofNullable(_nameClsMap.get(name.toLowerCase()), () -> {
                throw new ClassificationNotFoundException("Unknown classification name: " + name);
            });
        }

        public CLS codeOf(Object code) {
            if (code == null) {
                return null;
            }
            if (_clsType.isAssignableFrom(code.getClass())) {
                @SuppressWarnings("unchecked")
                CLS cls = (CLS) code;
                return cls;
            }
            return _codeClsMap.get(code.toString().toLowerCase());
        }

        public CLS nameOf(String name, java.util.function.Function<String, CLS> valueOfCall) {
            if (name == null) {
                return null;
            }
            try {
                return valueOfCall.apply(name);
            } catch (RuntimeException ignored) { // not found
                return null;
            }
        }

        public List<CLS> listAll(CLS[] clss) {
            return new ArrayList<>(Arrays.asList(clss));
        }

        public List<CLS> listOf(Collection<String> codeList) {
            if (codeList == null) {
                throw new IllegalArgumentException("The argument 'codeList' should not be null.");
            }
            List<CLS> clsList = new ArrayList<>(codeList.size());
            for (String code : codeList) {
                clsList.add(of(code).get());
            }
            return clsList;
        }
    }
}
