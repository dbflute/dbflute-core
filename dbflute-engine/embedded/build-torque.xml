<project name="Torque" default="jdbc" basedir=".">
  <!--
    Note - You should not have to edit this file.

    Instead, if calling build-torque.xml directly, edit the build.properties
    that is in the same directory. If calling build-torque.xml via another
    build file, you can also use the build.properties in the same directory,
    or set the property torque.contextProperties to the file
    to use in place of build.properties (e.g. project.properties).
  -->

  <!--
    For us to load the default.properties from the classpath, we need to bootstrap.
    To know the right lib.dir for the torque-classpath, we need to manually
    figure out torque.lib.dir, but to do that, we need to manually figure
    out torque.contextProperties and load that so that any old configurations
    still work propertly. Then we can go on and do the rest of the mappings via
    old.properties.
   -->
  <property name="build.properties" value="build.properties"/>
  <property name="torque.contextProperties" value="${build.properties}"/>
  <property file="${torque.contextProperties}"/>
  <property name="lib.dir" value="lib"/>
  <property name="torque.lib.dir" value="${lib.dir}"/>
  <property name="logprop.dir" value="etc/logprop"/>

  <!--
    Build the classpath. Specifically point to each file we're including to avoid
    version conflicts in the case of the torque.lib.dir being something like lib.repo.
    However, we still need to pull in the user's database driver and since we don't
    know which jar that will be, after we've got all of our specific, version-safe jars,
    do a general inclusion of the torque.lib.dir to catch any drivers.
  -->
  <path id="torque-classpath">
    <!-- The log4j.properties (should be valid at first) -->
    <dirset dir=".">
      <include name="${logprop.dir}"/>
    </dirset>

    <!-- Extension Libraries
  	 should be before embedded to be preferred (so you can switch) -->
    <fileset dir="${torque.lib.dir}">
      <include name="extlib/*.jar"/>
    </fileset>

    <!-- Embedded Libraries -->
    <fileset dir="${torque.lib.dir}">
      <exclude name="extlib/*.jar"/> <!-- not to be duplicate -->
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!--
    The default.properties file will map old properties to the new ones along
    with setting the correct defaults.
  -->
  <property resource="org/apache/torque/default.properties">
    <classpath>
      <path refid="torque-classpath"/>
    </classpath>
  </property>

  <!--
    Do forward declarations of all of our tasks to centralize them and clean up the targets.

    The current directory in the Java world is DBFlute Client, which is execution directory.
    (however the current directory in the Ant world is DBFlute Engine...)
  -->
  <taskdef name="df-replace-schema" classpathref="torque-classpath"
    classname="org.dbflute.task.DfReplaceSchemaTask"/>
  <taskdef name="df-jdbc" classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueJDBCTransformTask"/>
  <taskdef name="df-doc" classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueDocumentationTask"/>
  <taskdef name="df-generate" classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueDataModelTask"/>
  <taskdef name="df-outside-sql-test" classpathref="torque-classpath"
    classname="org.dbflute.task.DfOutsideSqlTestTask"/>
  <taskdef name="df-sql2entity" classpathref="torque-classpath"
    classname="org.dbflute.task.DfSql2EntityTask"/>

  <taskdef name="df-refresh" classpathref="torque-classpath"
    classname="org.dbflute.task.manage.DfRefreshTask"/>
  <taskdef name="df-freegen" classpathref="torque-classpath"
    classname="org.dbflute.task.manage.DfFreeGenTask"/>
  <taskdef name="df-take-assert" classpathref="torque-classpath"
    classname="org.dbflute.task.manage.DfTakeAssertTask"/>

  <taskdef name="df-intro" classpathref="torque-classpath"
    classname="org.dbflute.task.manage.DfIntroTask"/>
  <taskdef name="df-upgrade" classpathref="torque-classpath"
    classname="org.dbflute.task.manage.DfUpgradeTask"/>

  <!--
    for Ant-Contrib
  -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <!-- ================================================================ -->
  <!-- C H E C K  U S E C L A S S P A T H                               -->
  <!-- ================================================================ -->
  <!-- Temporary hack around the propertiesUtil bug. Should             -->
  <!-- be fixed soon.                                                   -->
  <!-- ================================================================ -->

  <target name="check-use-classpath">
    <condition property="torque.internal.useClasspath">
      <equals arg1="${torque.useClasspath}" arg2="true"/>
    </condition>
  </target>

  <!-- ================================================================ -->
  <!-- C H E C K  R U N  O N L Y  O N  S C H E M A  C H A N G E         -->
  <!-- ================================================================ -->
  <!-- Maps the torque.runOnlyOnSchemaChange to                         -->
  <!-- torque.internal.runOnlyOnSchemaChange                            -->
  <!-- ================================================================ -->

  <target name="check-run-only-on-schema-change">
    <condition property="torque.internal.runOnlyOnSchemaChange">
      <equals arg1="${torque.runOnlyOnSchemaChange}" arg2="true"/>
    </condition>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                          Facade -->
  <!--                                                                          nnnnnn -->
  <target name="renewal" description="Renewal task">
    <antcall target="replace-schema"/>
    <antcall target="jdbc"/>
    <antcall target="doc"/>
    <antcall target="generate"/>
    <antcall target="outside-sql-test"/>
    <antcall target="sql2entity"/>
  </target>

  <target name="regenerate" description="Regenerate task">
    <antcall target="jdbc"/>
    <antcall target="doc"/>
    <antcall target="generate"/>
    <antcall target="outside-sql-test"/>
    <antcall target="sql2entity"/>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                   ReplaceSchema -->
  <!--                                                                   nnnnnnnnnnnnn -->
  <target name="replace-schema" description="ReplaceSchema task">
    <!-- @param dfans e.g. y (NotRequired) -->
    <!-- @param dfvarg e.g. alter-check, save-previous (NotRequired) -->
    <df-replace-schema
        contextProperties="${torque.contextProperties}"
        controlTemplate="${torque.template.doc}"
        templatePath="${torque.templatePath}"
        useClasspath="${torque.useClasspath}"
        environmentType="${dfenv}"
        areYouReadyAnswer="${dfans}"
        varyingArg="${dfvarg}">
    </df-replace-schema>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                            JDBC -->
  <!--                                                                            nnnn -->
  <target name="jdbc" description="JDBC task">
    <df-jdbc
      contextProperties="${torque.contextProperties}"
      environmentType="${dfenv}">
    </df-jdbc>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                             Doc -->
  <!--                                                                             nnn -->
  <target name="doc" description="Doc task">
    <!-- @param dfvarg e.g. load-data-reverse, schema-sync-check (NotRequired) -->
    <df-doc
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.doc}"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}"
      environmentType="${dfenv}"
      varyingArg="${dfvarg}">
    </df-doc>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                        Generate -->
  <!--                                                                        nnnnnnnn -->
  <target name="generate" depends="check-use-classpath" description="Generate task">
    <antcall target="om-classpath"/>
    <antcall target="om-template"/>
  </target>

  <target name="om-classpath" if="torque.internal.useClasspath">
    <df-generate
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.om}"
      useClasspath="${torque.useClasspath}"
      environmentType="${dfenv}">
    </df-generate>
  </target>

  <target name="om-template" unless="torque.internal.useClasspath">
    <df-generate
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.om}"
      templatePath="${torque.templatePath}"
      environmentType="${dfenv}">
    </df-generate>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                  OutsideSqlTest -->
  <!--                                                                  nnnnnnnnnnnnnn -->
  <target name="outside-sql-test" description="OutsideSqlTest task">
    <!-- @param dfsql The simple file name of target SQL. e.g. MemberBhv_selectSea.sql (NotRequired) -->
    <df-outside-sql-test
        contextProperties="${torque.contextProperties}"
        environmentType="${dfenv}"
        specifiedSqlFile="${dfsql}">
    </df-outside-sql-test>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                      Sql2Entity -->
  <!--                                                                      nnnnnnnnnn -->
  <target name="sql2entity" description="Sql2Entity task">
    <!--
      Parameters, outputDirectory and outputFile, are actually unused (as old).
      But the parameters may be referred to by Velocity so it remains.
    -->
    <!-- @param dfsql The simple file name of target SQL. e.g. MemberBhv_selectSea.sql (NotRequired) -->
    <df-sql2entity
        contextProperties="${torque.contextProperties}"
        controlTemplate="${torque.template.sql2entity}"
        templatePath="${torque.templatePath}"
        environmentType="${dfenv}"
        specifiedSqlFile="${dfsql}">
    </df-sql2entity>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                   Utility 10~29 -->
  <!--                                                                   nnnnnnnnnnnnn -->
  <target name="refresh" description="Refresh task">
  	<!-- @param dfprj refresh project name (NotRequired) -->
    <df-refresh
        contextProperties="${torque.contextProperties}"
        environmentType="${dfenv}"
        refreshProject="${dfprj}">
    </df-refresh>
  </target>

  <target name="freegen" description="FreeGen task">
  	<!-- @param gentgt The FreeGen request to be executed. (NotRequired) -->
    <df-freegen
        contextProperties="${torque.contextProperties}"
        templatePath="${torque.templatePath}"
        environmentType="${dfenv}"
        genTarget="${gentgt}">
    </df-freegen>
  </target>

  <target name="take-assert" description="TakeAssert task">
  	<!-- @param dfdir The directory of SQL root. e.g. ./playsql/sea (NotRequired) -->
    <df-take-assert
        contextProperties="${torque.contextProperties}"
        environmentType="${dfenv}"
        sqlRootDir="${dfdir}">
    </df-take-assert>
  </target>

  <!-- nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn -->
  <!--                                                                   Utility 30~99 -->
  <!--                                                                   nnnnnnnnnnnnn -->
  <target name="sai-download" description="Sai (Rhino now) Download task">
  	<!--
  	 Here, Sai means JavaScripg engines e.g. (codelib)sai, Rhino, Nashorn...
  	 They are all "sai" in Japanese.
  	 -->
    <!--
     @param dfclient the directory of DBFlute Client (Required)
     The Ant world "basedir" is DBFlute Engine, cannot get execution current directory.
     (however, Java class current directory is DBFlute Client...why?)
     -->
  	<property name="dest.base" value="${dfclient}/extlib"/>

  	<!-- Apache Ant, mkdir task https://ant.apache.org/manual/Tasks/mkdir.html -->
  	<mkdir dir="${dest.base}"/>

  	<!-- to give you attention to the licenses -->
  	<property name="license.url.base" value="https://dbflute.org/meta/prototype/license"/>
  	<!-- #sai_to_rhino
	<get src="${license.url.base}/Rhino_License.txt" dest="${dest.base}/Rhino_License.txt" verbose="on"></get>
  	-->
	<get src="${license.url.base}/ASM_License.txt" dest="${dest.base}/ASM_License.txt" verbose="on"></get>
	<get src="${license.url.base}/Sai_License.txt" dest="${dest.base}/Sai_License.txt" verbose="on"></get>

  	<!--
  	 about jar files:
  	 migrate Nashorn to Rhino: http://dbflute.seasar.org/ja/lastaflute/howto/upgrade/migration/lahorntorhino.html 
  	 migrate Nashorn to sai: http://dbflute.seasar.org/ja/lastaflute/howto/upgrade/migration/lahorntosai.html 
  	-->
  	<!--
  	 Apache Ant, get task: https://ant.apache.org/manual/Tasks/get.html
  	 cannot use nested elements because of old version now
  	-->
  	<property name="maven.url.base" value="https://repo1.maven.org/maven2"/>
  	<!-- #sai_to_rhino
	<get src="${maven.url.base}/org/mozilla/rhino/1.7.13/rhino-1.7.13.jar" dest="${dest.base}/rhino-1.7.13.jar" verbose="on"></get>
	<get src="${maven.url.base}/org/mozilla/rhino-engine/1.7.13/rhino-engine-1.7.13.jar" dest="${dest.base}/rhino-engine-1.7.13.jar" verbose="on"></get>
	 -->
	<get src="${maven.url.base}/org/ow2/asm/asm/7.1/asm-7.1.jar" dest="${dest.base}/asm-7.1.jar" verbose="on"></get>
	<get src="${maven.url.base}/org/ow2/asm/asm-analysis/7.1/asm-analysis-7.1.jar" dest="${dest.base}/asm-analysis-7.1.jar" verbose="on"></get>
	<get src="${maven.url.base}/org/ow2/asm/asm-commons/7.1/asm-commons-7.1.jar" dest="${dest.base}/asm-commons-7.1.jar" verbose="on"></get>
	<get src="${maven.url.base}/org/ow2/asm/asm-tree/7.1/asm-tree-7.1.jar" dest="${dest.base}/asm-tree-7.1.jar" verbose="on"></get>
	<get src="${maven.url.base}/org/ow2/asm/asm-util/7.1/asm-util-7.1.jar" dest="${dest.base}/asm-util-7.1.jar" verbose="on"></get>
	<get src="${maven.url.base}/org/codelibs/sai/0.2.0/sai-0.2.0.jar" dest="${dest.base}/sai-0.2.0.jar" verbose="on"></get>
  </target>

  <target name="intro" description="DBFlute Intro task">
    <df-intro
        contextProperties="${torque.contextProperties}"
        environmentType="${dfenv}">
    </df-intro>
  </target>

  <target name="upgrade" description="DBFlute Upgrade task">
  	<!-- @param The explicit version for upgrading (NotRequired) -->
    <df-upgrade
        contextProperties="${torque.contextProperties}"
        environmentType="${dfenv}"
        version="${dfver}">
    </df-upgrade>
  </target>
</project>
